[{"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/index.js":"1","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/App.js":"2","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/NavBar.js":"3","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/styledComponents/StyledButton.js":"4","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/styledComponents/StyledTextField.js":"5","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/HomePage.js":"6","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/SignInPage.js":"7","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/SchedulePage.js":"8","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/EmployeesPage.js":"9","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/styledComponents/NewEmployeeForm.js":"10","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/testData/testEmployees.js":"11","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/testData/testTimes.js":"12","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/styledComponents/EmployeeCard.js":"13","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/themes/theme.js":"14","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/themes/mintTheme.js":"15","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/calendars/Calendar.js":"16","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/calendars/PersonalCalendar.js":"17","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/calendars/Availability.js":"18","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/index.js":"19","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/App.js":"20","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/homePage/HomePage.js":"21","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/navigation/Navigation.js":"22","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/signInPage/SignInPage.js":"23","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/schedulePage/SchedulePage.js":"24","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/EmployeesPage.js":"25","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/reducers/index.js":"26","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/themes/theme.js":"27","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/themes/mintTheme.js":"28","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/actions/employees.js":"29","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/styledComponents/StyledTextField.js":"30","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/styledComponents/StyledButton.js":"31","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/signInPage/styles.js":"32","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/navigation/styles.js":"33","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/styles.js":"34","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/homePage/styles.js":"35","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/schedulePage/styles.js":"36","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/reducers/employees.js":"37","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeCard/EmployeeCard.js":"38","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeCard/EditCard.js":"39","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeForm/EmployeeForm.js":"40","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/homePage/generateScheduleButton/GenerateScheduleButton.js":"41","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/calendars/Calendar.js":"42","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/calendars/PersonalCalendar.js":"43","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/schedulePage/dropDownMenu/DropDownMenuEmployees.js":"44","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/constants/actionTypes.js":"45","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeCard/styles.js":"46","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeForm/styles.js":"47","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/constants/positions.js":"48","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/api/index.js":"49","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/formatAndValidations/formatPhoneNumber.js":"50","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/formatAndValidations/validateEmail.js":"51","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeForm/availabilityComponent/AvailabilityComponent.js":"52","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/testData/weekShifts.js":"53","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/testData/testTimes.js":"54","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/testData/testEmployees.js":"55"},{"size":196,"mtime":1615639479491,"results":"56","hashOfConfig":"57"},{"size":2273,"mtime":1616300620000,"results":"58","hashOfConfig":"57"},{"size":2066,"mtime":1616113522105,"results":"59","hashOfConfig":"57"},{"size":591,"mtime":1616292777073,"results":"60","hashOfConfig":"57"},{"size":1274,"mtime":1616055153810,"results":"61","hashOfConfig":"57"},{"size":2909,"mtime":1617265347543,"results":"62","hashOfConfig":"57"},{"size":3667,"mtime":1616573620201,"results":"63","hashOfConfig":"57"},{"size":888,"mtime":1616302239638,"results":"64","hashOfConfig":"57"},{"size":1428,"mtime":1617135589449,"results":"65","hashOfConfig":"57"},{"size":7472,"mtime":1616292616538,"results":"66","hashOfConfig":"57"},{"size":7635,"mtime":1616567322274,"results":"67","hashOfConfig":"57"},{"size":991,"mtime":1617047387478,"results":"68","hashOfConfig":"57"},{"size":4253,"mtime":1616273529229,"results":"69","hashOfConfig":"57"},{"size":999,"mtime":1616250125729,"results":"70","hashOfConfig":"57"},{"size":684,"mtime":1616274998997,"results":"71","hashOfConfig":"57"},{"size":1412,"mtime":1616571742173,"results":"72","hashOfConfig":"57"},{"size":1126,"mtime":1616571314543,"results":"73","hashOfConfig":"57"},{"size":4056,"mtime":1616573252515,"results":"74","hashOfConfig":"57"},{"size":504,"mtime":1620974661854,"results":"75","hashOfConfig":"76"},{"size":1543,"mtime":1620938972494,"results":"77","hashOfConfig":"76"},{"size":1683,"mtime":1621123234834,"results":"78","hashOfConfig":"76"},{"size":4614,"mtime":1620974421482,"results":"79","hashOfConfig":"76"},{"size":3433,"mtime":1617907326284,"results":"80","hashOfConfig":"76"},{"size":3174,"mtime":1620967271187,"results":"81","hashOfConfig":"76"},{"size":4586,"mtime":1620974471604,"results":"82","hashOfConfig":"76"},{"size":123,"mtime":1617342968319,"results":"83","hashOfConfig":"76"},{"size":999,"mtime":1616250125729,"results":"84","hashOfConfig":"76"},{"size":710,"mtime":1618781199506,"results":"85","hashOfConfig":"76"},{"size":1043,"mtime":1618856927991,"results":"86","hashOfConfig":"76"},{"size":1274,"mtime":1616055153810,"results":"87","hashOfConfig":"76"},{"size":591,"mtime":1616292777073,"results":"88","hashOfConfig":"76"},{"size":883,"mtime":1618088431148,"results":"89","hashOfConfig":"76"},{"size":1291,"mtime":1618681773595,"results":"90","hashOfConfig":"76"},{"size":815,"mtime":1618599243373,"results":"91","hashOfConfig":"76"},{"size":1009,"mtime":1621123959791,"results":"92","hashOfConfig":"76"},{"size":516,"mtime":1619212685558,"results":"93","hashOfConfig":"76"},{"size":566,"mtime":1617343547885,"results":"94","hashOfConfig":"76"},{"size":3216,"mtime":1620966904132,"results":"95","hashOfConfig":"76"},{"size":3187,"mtime":1620966959107,"results":"96","hashOfConfig":"76"},{"size":12626,"mtime":1620943269180,"results":"97","hashOfConfig":"76"},{"size":7584,"mtime":1620975548800,"results":"98","hashOfConfig":"76"},{"size":2032,"mtime":1620967122757,"results":"99","hashOfConfig":"76"},{"size":1886,"mtime":1620974500154,"results":"100","hashOfConfig":"76"},{"size":2439,"mtime":1620975698528,"results":"101","hashOfConfig":"76"},{"size":129,"mtime":1620974561999,"results":"102","hashOfConfig":"76"},{"size":2353,"mtime":1620966784124,"results":"103","hashOfConfig":"76"},{"size":1230,"mtime":1620943648878,"results":"104","hashOfConfig":"76"},{"size":288,"mtime":1618598215025,"results":"105","hashOfConfig":"76"},{"size":366,"mtime":1617347928933,"results":"106","hashOfConfig":"76"},{"size":1033,"mtime":1620974329845,"results":"107","hashOfConfig":"76"},{"size":320,"mtime":1618618458279,"results":"108","hashOfConfig":"76"},{"size":3374,"mtime":1620730726744,"results":"109","hashOfConfig":"76"},{"size":47487,"mtime":1620651657803,"results":"110","hashOfConfig":"76"},{"size":1014,"mtime":1619213895367,"results":"111","hashOfConfig":"76"},{"size":7635,"mtime":1618858021653,"results":"112","hashOfConfig":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"7o5q2r",{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"115"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"115"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"115"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"115"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"115"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"115"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"115"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"115"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"115"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"pr7kzk",{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"161"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"161"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"161"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"161"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"161"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"161"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"161"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"161"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"161"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"161"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"161"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"161"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"161"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"161"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"161"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"161"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/index.js",[],["250","251"],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/App.js",["252","253","254","255"],"import './App.css';\nimport Home from './components/HomePage.js'\nimport NavBar from './components/NavBar.js'\nimport SignIn from './components/SignInPage.js'\nimport Schedule from './components/SchedulePage.js'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport EmployeesPage from './components/EmployeesPage.js'\nimport theme from './themes/theme'\nimport mintTheme from './themes/mintTheme'\nimport {  ThemeProvider } from '@material-ui/core/styles'\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\nimport { useState } from 'react'\nimport { testEmployees } from './testData/testEmployees'\nimport { appointments } from './testData/testTimes'\nimport { Container } from '@material-ui/core'\n\nfunction App() {\n  const [employees, setEmployees] = useState(testEmployees)\n  const [employeesSchedules, setEmployeesSchedules] = useState(testEmployees.weekSchedule)\n  \n  const isUserAuthenticated = false\n\n  const setEmployee = ({employee}) => {\n    const newEmployee = {\n      firstName: employee.firstName,\n      middleInitial: employee.middleInitial,\n      lastName: employee.lastName,\n      email: employee.email,\n      phoneNumber: employee.phoneNumber,\n      tenure: employee.startDate,\n      positions: [employee.position],\n      availability: [employee.availability],\n      desiredHours: employee.desiredHours,\n    }\n    setEmployees([...employees, newEmployee])\n  }\n\n  \n  return (\n    <Router>\n      <ThemeProvider theme={ mintTheme }>\n        <CssBaseline />\n          <NavBar/>\n          <Route\n            exact\n            path=\"/\"\n            render={() => {\n                return (\n                  isUserAuthenticated ?\n                  <Redirect to=\"/home\" /> :\n                  <Redirect to=\"/sign-in\" /> \n                )\n            }}\n          />\n          <Route path='/sign-in' component={ SignIn } />\n          <Route path='/home'>\n            <Home employee={testEmployees[0]}/>\n          </Route>\n          <Route path='/schedule'>\n            <Schedule employeesSchedules={employeesSchedules} />\n          </Route>\n          <Route path='/employees'>\n            <EmployeesPage employees={employees} addEmployee={setEmployee} />\n          </Route>  \n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/NavBar.js",["256"],"import AppBar from '@material-ui/core/AppBar'\nimport ToolBar from '@material-ui/core/ToolBar'\nimport Container from '@material-ui/core/Container'\nimport { Link, } from 'react-router-dom'\nimport logo from './images/avacado.png'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n    navbar: {\n        backgroundColor: theme.palette.background.default,\n    },\n    navbarLinks: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    link: {\n        color: theme.palette.primary.main,\n        fontSize: '1.3rem',\n        fontWeight: 'bold',\n        textDecoration: 'none',\n        marginRight: '2rem',\n        marginLeft: '2rem',\n        '&:hover': {\n            color: theme.palette.primary.light,\n        },\n    },\n}))\n\nconst NavBar = () => {\n    const classes = useStyles()\n    return (\n        <div>\n            <AppBar className={classes.navbar} position='sticky'>\n                <ToolBar>\n                    <Link to='/home'>\n                        <img src={ logo } className='navbar-logo' alt='logo'/>\n                    </Link>\n                        <Container className={classes.navbarLinks}>\n                            <Link className={classes.link} to='/home'>\n                                Home\n                            </Link>\n                            <Link className={classes.link} to='/schedule' >\n                                Schedule\n                            </Link>\n                            <Link className={classes.link} to='/employees'>\n                                Employees\n                            </Link>\n                        </Container>\n                    <Link className='navbar-sign-in-logo' to='/sign-in'>\n                        <Typography class='material-icons md-36'>account_box</Typography>\n                    </Link>\n                </ToolBar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default NavBar\n","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/styledComponents/StyledButton.js",[],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/styledComponents/StyledTextField.js",[],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/HomePage.js",["257","258","259","260","261","262"],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/SignInPage.js",["263"],"import lime from './images/lime.svg'\nimport { useState } from 'react'\nimport { makeStyles, } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Collapse from '@material-ui/core/Collapse'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport IconButton from '@material-ui/core/IconButton'\nimport clsx from 'clsx'\nimport Container from '@material-ui/core/Container'\nimport StyledTextField from './styledComponents/StyledTextField.js'\nimport StyledButton from './styledComponents/StyledButton.js'\n\nconst useStyles = makeStyles((theme) => ({\n    center: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems:'center',\n        justifyContent:'center',\n        padding:'2rem',\n    },\n    card: {\n        maxWidth: '95vh', \n        borderRadius: '10px',\n        boxShadow: '0px 0px 25px 0px rgba(0, 0, 0, .7)',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems:'center',\n        justifyContent:'center',\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.short,\n        }),\n      },\n      expandOpen: {\n        transform: 'rotate(180deg)',\n      },\n}))\n\nconst Home = () => {\n    const classes = useStyles()\n    const [expanded, setExpanded] = useState(false)\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded)\n    }\n\n    return (\n        <Container className={classes.center}>\n            <Card className={classes.card}>\n                <CardContent>\n                    <img src={ lime } className='App-logo' alt='logo' />\n                </CardContent>\n                <CardContent>\n                    <StyledButton \n                        style={{width:'12rem'}} \n                        onClick={handleExpandClick}>\n                            SIGN IN\n                    </StyledButton>\n                </CardContent>\n                <CardActions disableSpacing>\n                    <IconButton\n                        className={clsx(classes.expand, {\n                            [classes.expandOpen]: expanded,\n                        })}\n                            onClick={handleExpandClick}\n                            aria-expanded={expanded}\n                            aria-label=\"sign in\"\n                    >\n                        <ExpandMoreIcon style={{ color: 'lightgray' }} />\n                    </IconButton>\n                </CardActions>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                    <CardContent>\n                        <div>\n                            <StyledTextField \n                                variant='filled' \n                                color='primary' \n                                label='Username' \n                                required='true'\n                            />\n                        </div>\n                        <div>\n                            <StyledTextField \n                                variant='filled' \n                                color='primary' \n                                label='Password' \n                                required='true'\n                                style={{marginBottom: '1rem'}}\n                            />\n                        </div>\n                    </CardContent>\n                </Collapse>\n            </Card> \n        </Container>\n    )\n}\n\nexport default Home\n","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/SchedulePage.js",[],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/EmployeesPage.js",["264"],"import { useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles } from '@material-ui/core'\nimport NewEmployeeForm from './styledComponents/NewEmployeeForm.js'\nimport Divider from '@material-ui/core/Divider'\nimport EmployeeCard from './styledComponents/EmployeeCard.js'\n\nconst useStyles = makeStyles((theme) => ({\n    center: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    title: {\n        margin: '2rem',\n        color: '#F7F7FF',\n    },\n    grid: {\n        flexGrow: 1,\n        justifyContent: 'space-around',\n        alignItems: 'center'\n    },\n}))\n\nconst EmployeesView = ({employees, addEmployee}) => {\n    const classes = useStyles()\n    return (\n        <Container className={classes.center}>\n            <Typography variant='h4' className={classes.title}>Employees</Typography>\n            <Divider light/>\n            <NewEmployeeForm addEmployee={addEmployee}/>\n            <Grid container className={classes.grid} spacing={1}>\n                {employees.map((employee) => (\n                    <Grid item>\n                        <EmployeeCard employee={employee} />\n                    </Grid>\n                ))}\n            </Grid>\n        </Container>\n    )\n}\n\nexport default EmployeesView\n","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/styledComponents/NewEmployeeForm.js",["265","266","267","268"],"import StyledTextField from './StyledTextField.js'\nimport Card from '@material-ui/core/Card'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Slide from '@material-ui/core/Slide'\nimport Icon from '@material-ui/core/Icon'\nimport IconButton from '@material-ui/core/IconButton'\nimport StyledButton from './StyledButton.js'\nimport { useState, forwardRef, useEffect, useRef} from 'react'\nimport { useTheme, makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme)=> ({\n    root: {\n        [theme.breakpoints.down('sm')]: {\n            width:'100%',\n            margin: 0,\n            padding: 0,\n        },\n        backgroundColor: 'rgba(25,25,25,.8)',\n    }\n}))\n\nconst NewEmployeeForm = ({addEmployee}) => {\n    const [open, setOpen] = useState(false)\n    const [scroll, setScroll] = useState('paper')\n    const classes = useStyles()\n    const [employee, setEmployee] = useState({\n        firstName: '',\n        middleInitial: '',\n        lastName: '',\n        phoneNumber: '',\n        email: '',\n        position: '',\n    })\n  \n    const handleClickOpen = (scrollType) => () => {\n        setOpen(true)\n        setScroll(scrollType)\n    }\n  \n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    const addEmployeeButton = () => {\n        setOpen(false)\n        addEmployee({employee})\n    }\n\n  \n    const descriptionElementRef = useRef(null)\n    useEffect(() => {\n      if (open) {\n        const { current: descriptionElement } = descriptionElementRef\n        if (descriptionElement !== null) {\n          descriptionElement.focus()\n        }\n      }\n    }, [open])\n  \n    return (\n      <div>\n        <IconButton style={{bottom: '2vh'}} onClick={handleClickOpen('paper')}>\n            <Icon color='primary'>add-icon</Icon>\n        </IconButton>\n        <Dialog\n            className={classes.root}\n            open={open}\n            onClose={handleClose}\n            scroll={scroll}\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\"\n            style={{width: '100%', borderRadius: '20px',}}\n        >\n        <DialogTitle \n            id=\"scroll-dialog-title\"\n            style={{\n                backgroundImage:'linear-gradient(0deg, #353535 30%, #424242 70%)',\n            }}\n        >\n            <h3 className='card-title'>New Employee</h3>\n        </DialogTitle>\n            <DialogContent \n                dividers={scroll === 'paper'}\n                style={{\n                    backgroundColor:'#333333',\n                    boxShadow: '0 0 10px #202020',\n                    paddingTop: '2.5rem',\n                    margin: 0\n                }}\n            >\n            <DialogContentText\n              id=\"scroll-dialog-description\"\n              ref={descriptionElementRef}\n              tabIndex={-1}\n            >\n                <Box >\n                    <form noValidate autoComplete='off'>\n                        <div>\n                            <StyledTextField \n                                label='First Name' \n                                required\n                                fullWidth\n                                variant='filled'\n                                color='secondary'\n                                value={employee.firstName}\n                                onChange={(e) => setEmployee({...employee, firstName: e.target.value})}\n                            />\n                        </div>\n                        <div >\n                            <StyledTextField \n                                label='M.I.' \n                                inputProps={{ maxLength: '1'}}\n                                fullWidth\n                                variant='filled'\n                                color='secondary'\n                                value={employee.middleInitial}\n                                onChange={(e) => setEmployee({...employee, middleInitial: e.target.value})}\n                            />\n                        </div>\n                        <div>\n                            <StyledTextField \n                                label='Last Name' \n                                required\n                                fullWidth\n                                variant='filled'\n                                color='secondary'\n                                value={employee.lastName}\n                                onChange={(e) => setEmployee({...employee, lastName: e.target.value})}\n                            />\n                        </div>\n                        <div>\n                            <StyledTextField \n                                label='Phone Number' \n                                required\n                                fullWidth\n                                variant='filled'\n                                color='secondary'\n                                value={employee.phoneNumber}\n                                onChange={(e) => setEmployee({...employee, phoneNumber: e.target.value})}\n                            />\n                        </div>\n                        <div>\n                            <StyledTextField \n                                label='Email' \n                                required\n                                fullWidth\n                                variant='filled'\n                                color='secondary'\n                                value={employee.email}\n                                onChange={(e) => setEmployee({...employee, email: e.target.value})}\n                            />\n                        </div>\n                        <div>\n                            <StyledTextField \n                                label='Date Started'\n                                required\n                                fullWidth\n                                variant='filled'\n                                color='secondary'\n                            />\n                        </div>\n                        <div>\n                            <StyledTextField \n                                label='Starting Position'\n                                required\n                                fullWidth\n                                variant='filled'\n                                color='secondary'\n                                value={employee.position}\n                                onChange={(e) => setEmployee({...employee, position: e.target.value})}\n                            />\n                        </div>\n                    </form>\n                </Box>\n            </DialogContentText>\n            </DialogContent>\n            <DialogActions style={{backgroundColor:'#424242', padding:'1rem 2rem 1rem 2rem'}}>\n            <Button variant='text' onClick={handleClose} color='primary' style={{color:'#bbb'}}>\n              Cancel\n            </Button>\n            <StyledButton style={{height:'3rem', width:'12rem'}} variant='contained' onClick={addEmployeeButton} color='secondary'>\n              Add Employee\n            </StyledButton>\n          </DialogActions>\n        </Dialog>\n      </div>\n    )\n}\n\nexport default NewEmployeeForm","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/testData/testEmployees.js",[],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/testData/testTimes.js",[],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/styledComponents/EmployeeCard.js",["269","270"],"import { useState } from 'react'\nimport { makeStyles } from '@material-ui/core'\nimport ReactCardFlip from 'react-card-flip'\nimport Card from '@material-ui/core/Card'\nimport Container from '@material-ui/core/Container'\nimport EmployeesView from '../EmployeesPage'\nimport Divider from '@material-ui/core/Divider'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        height: '200px',\n        width: '200px',\n        margin: '5px',\n        marginTop: '10px',\n        marginBottom: '10px',\n        borderRadius: '10px',\n        boxShadow: '0 5px 40px -12px rgba(0,0,0,0.8)',\n        transition: '0.1s',\n        '&:hover' : {\n            boxShadow: '0 10px 70px -12.125px rgba(0,0,0,0.8)',\n            height: '205px',\n            width: '205px',\n            margin: '2px'\n        },\n        '&:hover button' : {\n            opacity: '1',\n        }\n    },\n    cardFrontTop: {\n        height: '50px',\n        justifyContent: 'center',\n        textAlign: 'center',\n        margin:'auto',\n        alignContent: 'center',\n        fontSize: '18px',\n    },\n    cardFrontDetails: {\n        height: '120px',\n        display: 'flex',\n        flexDirection: 'column',\n        justfiyContent: 'space-between',\n        alignItems: 'center',\n        textAlign: 'center',\n        fontSize: '14px'\n    },\n    cardBack: {\n        height: '230px',\n        width: '200px',\n        margin: '5px',\n        marginTop:'-25px',\n        marginBottom:'-25px',\n        borderRadius: '10px',\n        boxShadow: '0 10px 70px -12.125px rgba(0,0,0,0.8)',\n        '&:hover button' : {\n            boxShadow: '0 10px 70px -12.125px rgba(0,0,0,0.8)',\n            opacity: 1,\n        }\n    },\n    cardBackContent: {\n        display: 'flex',\n        flexDirection: 'column',\n        justfiyContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    flipButtonFrontArea: {\n        height: '30px',\n        top: '90px',\n        justifyContent: 'center',\n        alignItems: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    flipButton: {\n        color: theme.palette.secondary.main,\n        opacity: 0,\n        margin:0,\n        padding:0,\n        transition: '0.1s',\n        height: '25px',\n        width: '90px',\n        fontSize: '12px',\n    },\n    divider: {\n        backgroundColor: theme.palette.secondary.main,\n    }\n}))\n\nconst EmployeeCard = ({employee}) => {\n    const classes = useStyles()\n    const [isFlipped, setIsFlipped] = useState()\n    const positions = employee.positions\n\n    return (\n        <ReactCardFlip isFlipped={isFlipped} flipDirection='vertical'>\n\n            <Card className={classes.card}>\n                <Container className={classes.cardFrontTop}>\n                    {employee.firstName} {employee.lastName}\n                    <Divider className={classes.divider}/>\n                </Container>\n                <Container className={classes.cardFrontDetails}>\n                    {positions.map((position)=>\n                        <li>{position}</li>\n                    )}\n                </Container>\n                <Container className={classes.flipButtonFrontArea}>\n                    <Button \n                        className={classes.flipButton} \n                        variant='text'\n                        style={{}}\n                        onClick={() => setIsFlipped(!isFlipped)}\n                    >\n                        Flip Card\n                    </Button>\n                </Container>\n            </Card>\n            <Card className={classes.cardBack}>\n                <Container className={classes.cardBackContent}>\n                    <div>\n                        {employee.phoneNumber}\n                    </div>\n                    <div>\n                        {employee.email}\n                    </div>\n                    <Button \n                        className={classes.flipButton} \n                        onClick={() => setIsFlipped(!isFlipped)}\n                        >\n                            Flip Card\n                    </Button>\n                </Container>\n            </Card>\n        </ReactCardFlip>\n    )\n}\n\nexport default EmployeeCard\n","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/themes/theme.js",[],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/themes/mintTheme.js",[],"/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/calendars/Calendar.js",["271","272","273","274","275","276"],"import { makeStyles } from '@material-ui/core/styles'\nimport { \n    ViewState, \n    EditingState, \n    IntegratedEditing \n} from '@devexpress/dx-react-scheduler'\nimport { \n    Scheduler, \n    DayView, \n    WeekView,\n    Appointments, \n    AppointmentForm,\n    ConfirmationDialog,\n    AppointmentTooltip,\n    Toolbar,\n    ViewSwitcher,\n    TodayButton,\n    DateNavigator,\n} from '@devexpress/dx-react-scheduler-material-ui'\nimport Card from '@material-ui/core/Card'\nimport { appointments } from '../../testData/testTimes'\n\nconst Calendar = ({employeesSchedules}) => {\n    const currentDate = new Date()\n    const schedulerData = appointments\n\n    return (\n        <Scheduler\n            data={schedulerData}\n            firstDayOfWeek={1}\n        >\n            <ViewState\n                defaultCurrentDate={currentDate}\n            />\n            <DayView\n                startDayHour={7}\n                cellDuration={60}\n                endDayHour={23}\n            />\n            <WeekView\n                startDayHour={7}\n                cellDuration={60}\n                endDayHour={23}\n            />\n            <Toolbar />\n            <ViewSwitcher />\n            <Appointments />\n            <AppointmentTooltip \n                showCloseButton\n                showDeleteButton\n            />\n            <TodayButton />\n            <DateNavigator />\n        </Scheduler>\n    )\n}\n\nexport default Calendar","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/calendars/PersonalCalendar.js",["277","278","279","280","281","282","283","284","285"],"import { makeStyles } from '@material-ui/core/styles'\nimport { \n    ViewState, \n} from '@devexpress/dx-react-scheduler'\nimport { \n    Scheduler, \n    DayView, \n    WeekView,\n    Appointments, \n    AppointmentTooltip,\n    Toolbar,\n    ViewSwitcher,\n    TodayButton,\n    DateNavigator,\n} from '@devexpress/dx-react-scheduler-material-ui'\nimport Card from '@material-ui/core/Card'\nimport { appointments } from '../../testData/testTimes'\n\nconst PersonalCalendar = ({employeeWeekSchedule}) => {\n    const currentDate = new Date()\n\n    return (\n            <Scheduler\n                data={employeeWeekSchedule}\n                firstDayOfWeek={1}\n            >\n                <ViewState\n                    defaultCurrentDate={currentDate}\n                />\n                <WeekView\n                    startDayHour={6}\n                    cellDuration={120}\n                    endDayHour={24}\n                />\n                \n                <Appointments />\n                {/* <AppointmentTooltip \n                    showCloseButton\n                /> */}\n            </Scheduler>\n    )\n}\n\nexport default PersonalCalendar","/Users/tyler/Documents/Programming/ReactApps/scheduler-app copy/src/components/calendars/Availability.js",["286","287","288","289","290","291","292","293","294","295","296"],"import React from 'react'\nimport { useState } from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport Container from '@material-ui/core/Container'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { \n    ViewState, \n    EditingState, \n    IntegratedEditing,\n } from '@devexpress/dx-react-scheduler'\nimport { \n    Scheduler,  \n    WeekView,\n    Appointments, \n    AppointmentForm,\n    AppointmentTooltip,\n    DragDropProvider,\n    ConfirmationDialog,\n    EditRecurrenceMenu,\n    AllDayPanel,\n    DateNavigator,\n    Toolbar,\n    ViewSwitcher,\n} from '@devexpress/dx-react-scheduler-material-ui'\nimport { areIntervalsOverlapping } from 'date-fns'\nimport { testEmployees } from '../../testData/testEmployees'\n\n// const Availability = ({employeeAvailability}) => {\n//     const currentDate = new Date()\n//     const [availability, setAvailability] = useState(employeeAvailability)\n\n//     const commitChanges = ({ added, changed, deleted }) => {\n//         if (added) {\n//             setAvailability([...availability, {...added}])\n//         }\n//         if (changed) {\n//              setAvailability(() => availability.map(appointment => (\n//                 changed[appointment] ? [...appointment, {...changed}] : appointment\n//              )))\n//         }\n//         if (deleted !== undefined) {\n//             setAvailability(() => availability.filter(appointment => appointment.id !== deleted))\n//         }\n//     }\n\n//     return (\n//             <Scheduler\n//                 data={availability}\n//                 firstDayOfWeek={1}\n//             >\n//                 <ViewState\n//                     defaultCurrentDate={currentDate}\n//                 />\n//                 <WeekView\n//                     startDayHour={6}\n//                     cellDuration={120}\n//                     endDayHour={24}\n//                 />\n//                 <EditingState onCommitChanges={commitChanges}/>\n//                 <IntegratedEditing />\n//                 <ConfirmationDialog />\n//                 <Appointments />\n//                 <AppointmentTooltip \n//                     showOpenButton\n//                     showCloseButton\n//                     showDeleteButton\n//                 />\n//                 <AppointmentForm />\n//                 <DragDropProvider />\n//             </Scheduler>\n//     )\n// }\n\n// export default Availability\n\nexport default class Demo extends React.PureComponent {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: testEmployees[0].availability,\n        currentDate: new Date(),\n      };\n  \n      this.commitChanges = this.commitChanges.bind(this);\n    }\n  \n    commitChanges({ added, changed, deleted }) {\n      this.setState((state) => {\n        let { data } = state;\n        if (added) {\n          const startingAddedId = data.length > 0 ? data[data.length - 1].id + 1 : 0;\n          data = [...data, { id: startingAddedId, ...added }];\n        }\n        if (changed) {\n          data = data.map(appointment => (\n            changed[appointment.id] ? { ...appointment, ...changed[appointment.id] } : appointment));\n        }\n        if (deleted !== undefined) {\n          data = data.filter(appointment => appointment.id !== deleted);\n        }\n        return { data };\n      });\n    }\n  \n    render() {\n      const { currentDate, data } = this.state;\n  \n      return (\n        // <Paper >\n          <Scheduler\n            data={data}\n            firstDayOfWeek={1}\n          >\n            <ViewState\n              currentDate={currentDate}\n            />\n            <EditingState onCommitChanges={this.commitChanges}/>\n            <IntegratedEditing />\n            <WeekView\n              startDayHour={6}\n              cellDuration={120}\n              endDayHour={24}\n            />\n            <ConfirmationDialog />\n            <Appointments />\n            <AppointmentTooltip\n              showOpenButton\n              showDeleteButton\n            />\n            <AppointmentForm />\n          </Scheduler>\n        // </Paper>\n      );\n    }\n  }\n  \n  ","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/index.js",[],["297","298"],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/App.js",["299","300","301","302","303"],"import './App.css';\nimport HomePage from './components/homePage/HomePage.js'\nimport Navigation from './components/navigation/Navigation.js'\nimport SignInPage from './components/signInPage/SignInPage.js'\nimport SchedulePage from './components/schedulePage/SchedulePage.js'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport EmployeesPage from './components/employeesPage/EmployeesPage.js'\nimport theme from './themes/theme'\nimport mintTheme from './themes/mintTheme'\nimport {  ThemeProvider } from '@material-ui/core/styles'\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { getEmployees } from './actions/employees'\n\nconst App = () => {\n  const dispatch = useDispatch()\n  const [currentId, setCurrentId] = useState(null)\n\n  useEffect(() => {\n    dispatch(getEmployees())\n  }, [currentId, dispatch])\n  \n  const [page, setPage] = useState(0)\n  const [addEmployee, setAddEmployee] = useState(false)\n  const pages = [<HomePage setPage={setPage} setAddEmployee={setAddEmployee} />, <SchedulePage/>, <EmployeesPage addEmployee={addEmployee} setAddEmployee={setAddEmployee}/>]\n\n  return (\n    <Router>\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n      <ThemeProvider theme={ mintTheme }>\n        <CssBaseline />\n          <Navigation pages={pages} page={page} setPage={setPage} />\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/homePage/HomePage.js",["304","305","306","307","308","309","310","311","312","313","314","315"],"import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ReactCardFlip from 'react-card-flip'\nimport { Box, Card, Container, Grid, makeStyles, Grow, Paper, CardMedia, Slide, Button } from '@material-ui/core'\nimport useStyles from './styles'\nimport calendarImage from '../../images/weekly-calendar-page-symbol.png'\nimport Surcheerios from '../../images/Surcheerios.png'\nimport leafyAvocado from '../../images/avocado-leafy.png'\nimport GenerateScheduleButton from './generateScheduleButton/GenerateScheduleButton'\nimport theme from '../../themes/mintTheme'\n\n\nconst HomePage = ({setPage, setAddEmployee}) => {\n    const classes = useStyles()\n\n    const handleAddEmployeeButton = () => {\n        setPage(2)\n        setAddEmployee(true)\n    }\n\n    return (\n        <Grid container className={classes.root} direction='column' justify='center' alignItems='center' spacing={0}>\n            <Grid item >\n                <CardMedia className={classes.titleCard} image={Surcheerios}>\n                    <Slide in direction='left' timeout={500}>\n                        <img className={classes.logo} src={leafyAvocado}/>\n                    </Slide>\n                </CardMedia>\n            </Grid>\n            <Grid item >\n                <GenerateScheduleButton setPage={setPage} />\n            </Grid>\n            <Grid item >\n                <Button style={{ color:theme.palette.secondary.main, backgroundColor:theme.palette.background.paper, width: 250, height: 50 }} variant='contained' onClick={handleAddEmployeeButton}>\n                    Add Employee\n                </Button>\n            </Grid>\n        </Grid>\n\n    )\n}\n\nexport default HomePage","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/navigation/Navigation.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/signInPage/SignInPage.js",["316","317","318","319"],"import lime from '../../images/lime.svg'\nimport { useState } from 'react'\nimport { makeStyles, } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Collapse from '@material-ui/core/Collapse'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport IconButton from '@material-ui/core/IconButton'\nimport clsx from 'clsx'\nimport Container from '@material-ui/core/Container'\nimport StyledTextField from '../../components/styledComponents/StyledTextField.js'\nimport StyledButton from '../../components/styledComponents/StyledButton.js'\nimport { Button, TextField, Grow } from '@material-ui/core'\nimport useStyles from './styles'\n\nconst Home = () => {\n    const classes = useStyles()\n    const [expanded, setExpanded] = useState(false)\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded)\n    }\n\n    return (\n        <Grow in>\n            <Container className={classes.center}>\n                <Card className={classes.card}>\n                    <CardContent>\n                        <img src={ lime } className='App-logo' alt='logo' />\n                    </CardContent>\n                    <CardContent>\n                        <Button \n                            variant='contained'\n                            color='primary'\n                            style={{width:'12rem'}} \n                            onClick={handleExpandClick}>\n                                SIGN IN\n                        </Button>\n                    </CardContent>\n                    <CardActions disableSpacing>\n                        <IconButton\n                            className={clsx(classes.expand, {\n                                [classes.expandOpen]: expanded,\n                            })}\n                                onClick={handleExpandClick}\n                                aria-expanded={expanded}\n                                aria-label=\"sign in\"\n                        >\n                            <ExpandMoreIcon style={{ color: 'lightgray' }} />\n                        </IconButton>\n                    </CardActions>\n                    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                        <CardContent>\n                            <div>\n                                <TextField \n                                    className={classes.textField}\n                                    variant='outlined' \n                                    color='primary' \n                                    label='Username' \n                                    required\n                                />\n                            </div>\n                            <div>\n                                <TextField \n                                    className={classes.textField}\n                                    variant='outlined' \n                                    color='primary' \n                                    label='Password' \n                                    required\n                                    style={{marginBottom: '1rem'}}\n                                />\n                            </div>\n                        </CardContent>\n                    </Collapse>\n                </Card> \n            </Container>\n        </Grow>\n    )\n}\n\nexport default Home\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/schedulePage/SchedulePage.js",["320","321","322","323"],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getEmployees } from '../../actions/employees'\nimport Calendar from '../calendars/Calendar'\nimport PersonalCalendar from '../calendars/PersonalCalendar'\nimport DropDownMenuEmployees from './dropDownMenu/DropDownMenuEmployees'\nimport { Container, Slide, Switch, Typography, Card, Grid } from '@material-ui/core'\nimport ReactCardFlip from 'react-card-flip'\nimport useStyles from './styles'\n\nconst Schedule = () => {\n    const classes = useStyles()\n    const [isFlipped, setIsFlipped] = useState(false)\n    const dispatch = useDispatch()\n    const employees = useSelector((state) => state.employees)\n    const [selectedEmployee, setSelectedEmployee] = useState(employees[0])\n    \n    const createScheduleWithNames = () => {\n        const scheduleWithNames = []\n        employees.forEach((employee) => {\n            let name = `${employee.firstName} ${employee.lastName}`\n            employee.weekSchedule.forEach((shift) => {\n                let shiftTitle = `${name} - ${shift.title}`\n                let tempShift = {...shift}\n                tempShift.title = shiftTitle\n                scheduleWithNames.push(tempShift)\n            })\n        })\n        return scheduleWithNames\n    }\n    \n    const employeesSchedules = createScheduleWithNames()\n\n\n    return (\n        <Slide in direction=\"left\">\n            <Grid container style={{paddingLeft: 20, paddingRight: 20}} justify='center' direction='column' alignItems='center' spacing={0}>\n                <Grid container style={{height: 40, marginBottom:10}} justify='space-between' direction='row' alignItems='spaceAround' xs={12}>\n                    <Grid container item direction='row' alignItems='center' xs={6}>\n                        {isFlipped\n                            ? null\n                            : <DropDownMenuEmployees  selectedEmployee={selectedEmployee} setSelectedEmployee={setSelectedEmployee} />\n                        }\n                    </Grid>\n                    <Grid container style={{paddingRight:20}} justify='flex-end' direction='row' alignItems='center'xs={6}>\n                        <Typography style={{fontWeight:450, fontSize: 18}} >View All</Typography>\n                        <Switch\n                            checked={isFlipped}\n                            onChange={ (e)=>setIsFlipped(e.target.checked)}\n                            name='checked'\n                            inputProps={{ 'aria-label': 'calendar checkbox' }}\n                        />\n                    </Grid>\n                </Grid>\n                <ReactCardFlip flipSpeedFrontToBack='.5' flipSpeedBackToFront='.5' isFlipped={isFlipped} flipDirection='vertical'>\n                    <Card className={classes.calendarCard}>\n                        <PersonalCalendar employee={selectedEmployee} />\n                    </Card>\n                    <Card className={classes.calendarCard}>\n                        <Calendar employeesSchedules={employeesSchedules} />\n                    </Card>\n                </ReactCardFlip>\n            </Grid>\n        </Slide>\n    )\n}\n\nexport default Schedule\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/EmployeesPage.js",["324","325","326","327"],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getEmployees, deleteEmployee } from '../../actions/employees'\nimport { Grow, Container, Grid, Typography, Fab, Slide } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport EditIcon from '@material-ui/icons/Edit'\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward'\nimport EmployeeCard from './employeeCard/EmployeeCard'\nimport EditCard from './employeeCard/EditCard'\nimport EmployeeForm from './employeeForm/EmployeeForm'\nimport useStyles from './styles'\n\nconst EmployeesPage = ({ addEmployee, setAddEmployee }) => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const employees = useSelector((state) => state.employees)\n    const [showEmployeeForm, setShowEmployeeForm] = useState(addEmployee)\n    const [showEmployeeGrid, setShowEmployeeGrid] = useState(!addEmployee)\n    const [editMode, setEditMode] = useState(false)\n    const [currentId, setCurrentId] = useState(null)\n\n    // const deleteDuplicates = () => {\n    //     const names = []\n    //     const newEmployees = []\n\n    //     employees.forEach((employee) => {\n    //         const name = employee.firstName\n    //         if(!names.includes(name)) {\n    //             names.push(name)\n    //             newEmployees.push(employee)\n    //         }\n    //         else {\n    //             dispatch(deleteEmployee(employee._id))\n    //         }\n    //     })\n    //\n    // }\n\n    useEffect(() => {\n        dispatch(getEmployees())\n    }, [currentId, dispatch])\n\n\n    const handleAddButton = () => {\n        setCurrentId(null)\n        showEmployeeForm ? unmountEmployeeForm() : mountEmployeeForm()\n    }\n    \n    const mountEmployeeForm = () => {\n        setTimeout(function(){setShowEmployeeForm(!showEmployeeForm)},250)\n        setShowEmployeeGrid(!showEmployeeGrid)\n    }\n\n    const unmountEmployeeForm = () => {\n        setShowEmployeeForm(!showEmployeeForm)\n        setAddEmployee(false)\n        setTimeout(function(){setShowEmployeeGrid(!showEmployeeGrid)},250)\n        setEditMode(false)\n    }\n\n    const handleEditButton = () => {\n        setEditMode(!editMode)\n    }\n\n    return (\n        <Grid container direction=\"column\" justify=\"center\"  xs={12} spacing={0}>\n\n            <Slide direction ='left' in={showEmployeeGrid} mountOnEnter unmountOnExit>\n                {\n\n                editMode \n                ?\n                <Grid container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\n                    <Grid container direction=\"row\" justify=\"center\" xs={12} spacing={0}>\n                        {employees.map((employee) => (\n                            <Grid key={employee._id} >\n                                <EditCard employee={employee} setCurrentId={setCurrentId} setShowEmployeeForm={setShowEmployeeForm} setShowEmployeeGrid={setShowEmployeeGrid} />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </Grid>\n                :\n                <Grid container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\n                    <Grid container direction=\"row\" justify=\"center\" xs={12} spacing={0}>\n                        {employees.map((employee) => (\n                            <Grid key={employee._id} >\n                                <EmployeeCard setCurrentId={setCurrentId} employee={employee} />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </Grid>\n\n                }\n            </Slide>\n\n            <Grid className={classes.buttonTray}>\n                <Fab className={classes.button} color=\"primary\" aria-label=\"addButton\" onClick={ handleAddButton }>\n                    { showEmployeeForm ? <ArrowDownwardIcon/> : <AddIcon/> }\n                </Fab>\n                <Fab className={classes.button} color=\"primary\" style={{backgroundColor: `${editMode ? '#67af77' : '#94FBAB'}`}} aria-label=\"editButton\" onClick={ handleEditButton }>\n                    <EditIcon />\n                </Fab>\n            </Grid>\n            \n            <Slide direction=\"up\" in={showEmployeeForm} mountOnEnter unmountOnExit>\n                <Grid item sm={12} className={classes.employeeFormContainer} >\n                    {setAddEmployee(false)}\n                    <EmployeeForm currentId={currentId} setCurrentId={setCurrentId} unmountEmployeeForm={unmountEmployeeForm}/>\n                </Grid>\n            </Slide>\n\n        </Grid>\n    )\n}\n\nexport default EmployeesPage\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/reducers/index.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/themes/theme.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/themes/mintTheme.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/actions/employees.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/styledComponents/StyledTextField.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/styledComponents/StyledButton.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/signInPage/styles.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/navigation/styles.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/styles.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/homePage/styles.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/schedulePage/styles.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/reducers/employees.js",["328"],"import { FETCH_ALL, DELETE, UPDATE, CREATE } from '../constants/actionTypes'\n\nexport default (employees=[], action) => {\n    switch(action.type) {\n        case FETCH_ALL:\n            return action.payload\n        case CREATE:\n            return [...employees, action.payload]\n        case DELETE:\n            return employees.filter((employee) => employee._id !== action.payload)\n        case UPDATE:\n            return employees.map((employee) => employee._id === action.payload._id ? action.payload : employee)\n        default:\n            return employees\n    }\n}","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeCard/EmployeeCard.js",["329","330","331","332","333"],"import { useState } from 'react'\nimport ReactCardFlip from 'react-card-flip'\nimport { deleteEmployee } from '../../../actions/employees'\nimport { Card, Container, Grid, Divider, Button, Typography, IconButton, Slide } from '@material-ui/core'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircleOutlined'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport contactButtonImage from '../../../images/more.svg'\nimport useStyles from './styles'\n\nconst EmployeeCard = ({employee}) => {\n    const classes = useStyles()\n    const [isFlipped, setIsFlipped] = useState(false)\n\n    return (\n        <ReactCardFlip isFlipped={isFlipped} flipDirection='vertical'>\n            \n            <Card className={classes.card} >\n                <Button style={{position: 'absolute', opacity: 0, height: 200, width: 200}} onClick={() => setIsFlipped(true)} />\n                <Container className={classes.cardFrontTop}>\n                    <Typography gutterBottom className={classes.cardTitle} textOverflow=\"ellipsis\">{employee.firstName} {employee.lastName}</Typography>\n                    <Divider className={classes.divider}/>\n                </Container>\n                <Slide direction=\"down\" in >\n                    <Container className={classes.cardFrontDetails}>\n                        <Typography style={{fontSize: 14, color: 'lightgray'}} variant=\"body2\">{employee.positions.join(\", \")}</Typography>\n                    </Container>\n                </Slide>\n            </Card>\n\n            <Card className={classes.cardBack} >\n                <Grid container className={classes.cardBackContent} >\n                    <Button style={{position: 'absolute', opacity: 0, height: 200, width: 200}} onClick={() => setIsFlipped(false)} />\n                        <Grid container item direction='column' justify='center'>\n                            <Typography className={classes.backInfoTitle} variant='body2'>Phone Number</Typography>\n                            <Typography className={classes.cardBackInfo}>{employee.phoneNumber}</Typography>\n                        </Grid>\n                        <Grid container item direction='column' justify='center'>\n                            <Typography className={classes.backInfoTitle} variant='body2'>Email</Typography>\n                            <Typography className={classes.cardBackInfo}>{employee.email}</Typography>\n                        </Grid>\n                        <Grid container item direction='column' justify='center'>\n                            <Typography className={classes.backInfoTitle} variant='body2'>Desired Hours</Typography>\n                            <Typography className={classes.cardBackInfo}>{employee.desiredHours}</Typography>\n                        </Grid>\n                        <Grid container item direction='column' justify='center'>\n                            <Typography className={classes.backInfoTitle} variant='body2'>Scheduled Hours</Typography>\n                            <Typography className={classes.cardBackInfo}>{employee.numHours}</Typography>\n                        </Grid>\n                </Grid>\n            </Card>\n            \n        </ReactCardFlip>\n    )\n}\n\nexport default EmployeeCard\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeCard/EditCard.js",["334","335","336","337"],"import { useState, forwardRef } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { deleteEmployee } from '../../../actions/employees'\nimport { Card, Container, Button, Typography, Divider, Grid, IconButton, Slide, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Paper, } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/DeleteForever'\nimport EditIcon from '@material-ui/icons/ListTwoTone'\nimport useStyles from './styles'\n\nconst Transition = forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n})\n\nconst EditCard = ({ employee, currentId, setCurrentId, setShowEmployeeForm, setShowEmployeeGrid }) => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const [open, setOpen] = useState(false)\n\n\n    const handleClose = () => {\n        setCurrentId(null)\n        setOpen(false)\n    }\n\n    const handleEditButton = () => {\n        setCurrentId(employee._id)\n        setShowEmployeeGrid(false)\n        setTimeout(()=>{setShowEmployeeForm(true)},250)\n    }\n\n    const handleDeleteButton = () => {\n        dispatch(deleteEmployee(employee._id))\n        handleClose()\n    }\n\n    return (\n        <div>\n            <Card className={classes.editCard}>\n                <Container className={classes.cardFrontTop}>\n                    <Typography gutterBottom className={classes.cardTitle} textOverflow=\"ellipsis\">{employee.firstName} {employee.lastName}</Typography>\n                </Container>\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" xs={12}>\n                    <Slide direction=\"down\" in >\n                        <Card style={{borderRadius:'10px'}}>\n                            <IconButton style={{backgroundColor:'transparent'}} onClick={ handleEditButton } >\n                                <EditIcon style={{ color:'lightgrey', fontSize:75 }} />\n                            </IconButton>\n                        </Card>\n                    </Slide>\n                    <Slide direction=\"up\" in >\n                        <IconButton style={{background: 'transparent'}} onClick={ () => setOpen(true) } >\n                            <DeleteIcon color='error'/>\n                        </IconButton>\n                    </Slide>\n                </Grid>\n            </Card>\n\n\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n            <DialogTitle id=\"alert-dialog-slide-title\">{\"Are you sure you want to delete \"} {employee.firstName} {employee.lastName}?</DialogTitle>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                    Nevermind\n                </Button>\n                <Button variant=\"contained\" onClick={ handleDeleteButton } color=\"primary\">\n                    Agree\n                </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n\nexport default EditCard\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeForm/EmployeeForm.js",["338","339","340","341","342","343","344"],"import { Card, Typography, TextField, Button, MenuItem, Paper, Grid, List, ListItem, ListItemIcon, Checkbox, ListItemText } from \"@material-ui/core\"\nimport { useState, useEffect } from 'react'\nimport useStyles from './styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addEmployee, editEmployee } from '../../../actions/employees'\nimport {formatPhoneNumber} from '../../../formatAndValidations/formatPhoneNumber'\nimport {isEmailValid} from '../../../formatAndValidations/validateEmail'\nimport { HOTLINE, COLDLINE, MAINTENANCE, FLOATER, BACKUPCASH, CASHIER, MEATPREP, VEGGIE } from '../../../constants/positions'\nimport AvailabilityComponent from './availabilityComponent/AvailabilityComponent'\n\nconst positions = [ MAINTENANCE, HOTLINE, COLDLINE, FLOATER, BACKUPCASH, CASHIER, MEATPREP, VEGGIE]\nconst hours = [ '0-5', '5-10', '10-15', '15-20', '20-25', '25-30', '30-35', '35-40', '40-45', '45+']\n\n\nconst EmployeeForm = ({ currentId, setCurrentId, unmountEmployeeForm }) => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const selectedEmployee = useSelector((state) => currentId ? state.employees.find((emp) => emp._id === currentId) : null)\n    \n    const [employee, setEmployee] = useState({\n        firstName: '',\n        middleInitial: '',\n        lastName: '',\n        phoneNumber: '',\n        email: '',\n        positions: [MAINTENANCE],\n        desiredHours: '25-30',\n        numHours: 0,\n        availability: [\n            {\n            day: 'Monday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Tuesday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Wednesday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Thursday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Friday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Saturday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Sunday',\n            morning: false,\n            evening: false,\n            },\n        ]\n    }) \n\n    const [firstNameError, setFirstNameError] = useState(null)\n    const [firstNameHelperText, setFirstNameHelperText] = useState('')\n    const [lastNameError, setLastNameError] = useState(null)\n    const [lastNameHelperText, setLastNameHelperText] = useState('')\n    const [emailError, setEmailError] = useState(null)\n    const [emailHelperText, setEmailHelperText] = useState('')\n    const [phoneNumberError, setPhoneNumberError] = useState(null)\n    const [phoneNumberHelperText, setPhoneNumberHelperText] = useState('')\n\n    useEffect(() => {\n        if(selectedEmployee)setEmployee(selectedEmployee)\n    }, [selectedEmployee])\n\n    const handleFocus = (e) => {\n        const fieldName = e.target.name\n        switch (fieldName){\n            case 'firstName':{\n                setFirstNameError(null)\n                setFirstNameHelperText('')\n                break\n            }\n            case 'lastName': {\n                setLastNameError(null)\n                setLastNameHelperText('')\n                break\n            }\n            case 'email': {\n                setEmailError(null)\n                setEmailHelperText('')\n                break\n            }\n            case 'phoneNumber': {\n                setPhoneNumberError(null)\n                setPhoneNumberHelperText('')\n                break\n            }\n        }\n    }\n    \n    const handleFirstName = () => {\n        if (employee.firstName == '') {\n            setFirstNameError(true)\n            setFirstNameHelperText('Gotta have a first name!')\n        }\n        else {\n            setFirstNameError(false)\n            setFirstNameHelperText('')\n        }\n    }\n\n    const handleLastName = () => {\n        if (employee.lastName == '') {\n            setLastNameError(true)\n            setLastNameHelperText('Gotta have a last name!')\n        }\n        else {\n            setLastNameError(false)\n            setLastNameHelperText('')\n        }\n    }\n\n    const getAvailability = (componentAvailability) => {\n        setEmployee({...employee, availability: componentAvailability})\n    }\n\n    const handlePhoneNumber = () => {\n        if (employee.phoneNumber.length < 14) {\n            setPhoneNumberError(true)\n            setPhoneNumberHelperText('Phone number is too short!')\n        }\n        else {\n            setPhoneNumberError(false)\n            setPhoneNumberHelperText('')\n        }\n    }\n\n    const handleEmail = () => {\n        if (!isEmailValid(employee.email)) {\n            setEmailError(true)\n            setEmailHelperText(\"That isn't a valid email!\")\n        }\n        else {\n            setEmailError(false)\n            setEmailHelperText('')\n        }\n    }\n\n    const handlePositions = (option) => () => {\n\n        const newPositions = employee.positions\n        \n        if (!newPositions.includes(option)) {\n            newPositions.push(option);\n        } else {\n            const currentPosition = employee.positions.indexOf(option)\n            newPositions.splice(currentPosition, 1);\n        }\n\n        \n        setEmployee({...employee, positions:newPositions})\n        console.log({employee})\n    }\n\n    const validateInfo = () => {\n        handleFirstName()\n        handleLastName()\n        handlePhoneNumber()\n        handleEmail()\n\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        console.log(employee)\n        validateInfo()\n\n        setTimeout(function(){\n            if(firstNameError==false && lastNameError==false && phoneNumberError==false && emailError==false){\n                if(currentId) {\n                    dispatch(editEmployee(currentId, employee))\n                }\n                else {\n                    dispatch(addEmployee(employee))\n                }\n                clear()\n                unmountEmployeeForm()\n            }\n        },1000)\n\n        \n    }\n\n    const clear = () => {\n        setEmployee({\n            firstName: '',\n            middleInitial: '',\n            lastName: '',\n            phoneNumber: '',\n            email: '',\n            positions: [MAINTENANCE],\n            desiredHours: '25-30',\n            numHours: 0,\n            availability: [\n                {\n                day: 'Monday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Tuesday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Wednesday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Thursday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Friday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Saturday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Sunday',\n                morning: false,\n                evening: false,\n                },\n    \n            ]\n        })\n        setFirstNameError(null)\n        setFirstNameHelperText('')\n        setLastNameError(null)\n        setLastNameHelperText('')\n        setEmailError(null)\n        setEmailHelperText('')\n        setPhoneNumberError(null)\n        setPhoneNumberHelperText('')\n        setCurrentId(null)\n    }\n\n    return (\n        <Card className={classes.card} >\n            <Typography className={classes.title} variant=\"h4\">{currentId ? `Edit ` : `Add New `}Employee</Typography>\n            <Grid container direction=\"row\" justify=\"center\" xs={12}>\n                <form className={`${classes.root} ${classes.form}`} autoComplete=\"off\" noValidate onSubmit={ handleSubmit } >\n\n                    <Grid container direction=\"column\" justifty=\"center\" item md={6} xs={12}>\n                        <Paper className={classes.paper} elevation={8} style={{paddingBottom: 30}}>\n                            <Typography variant=\"h5\" gutterBottom>Information</Typography>\n\n                            <TextField name=\"firstName\" required error={firstNameError} variant=\"outlined\" label=\"First Name\" value={employee.firstName} helperText={firstNameHelperText} onChange={ (e) => setEmployee({ ...employee, firstName: e.target.value.trim() })}  onFocus={ (e) => handleFocus(e) } />\n                            <TextField name=\"middleInitial\" variant=\"outlined\" label=\"Middle Initial\" value={employee.middleInitial} onChange={ (e) => setEmployee({ ...employee, middleInitial: e.target.value.toUpperCase() })} inputProps={{ maxLength:1 }}/>\n                            <TextField name=\"lastName\" required error={lastNameError} variant=\"outlined\" label=\"Last Name\" value={employee.lastName} helperText={lastNameHelperText} onChange={ (e) => setEmployee({ ...employee, lastName: e.target.value.trim() })}  onFocus={ (e) => handleFocus(e) }/>\n                            <TextField name=\"phoneNumber\" required error={phoneNumberError} variant=\"outlined\" label=\"Phone Number\" value={employee.phoneNumber} helperText={phoneNumberHelperText} onChange={ (e) => setEmployee({...employee, phoneNumber: formatPhoneNumber(e.target.value) })}  onFocus={ (e) => handleFocus(e)} />\n                            <TextField name=\"email\" required error={emailError} variant=\"outlined\" label=\"Email\" value={employee.email} helperText={emailHelperText} onChange={ (e) => setEmployee({...employee, email: e.target.value})} onFocus={ (e) => handleFocus(e) } />\n                            <TextField select name=\"hours\" required variant=\"outlined\" label=\"Desired Hours\" value={employee.desiredHours} onChange={ (e) => setEmployee({...employee, desiredHours: e.target.value}) }>\n                                {hours.map((option) => (\n                                    <MenuItem key={option} value={option}>\n                                        {option} hours\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Paper>\n                    </Grid>\n\n\n                <Grid container item direction=\"column\" justify=\"center\" alignContent=\"center\" md={6} xs={12} >\n                    <Paper className={classes.paper} elevation={8}>\n                    \n                        <Typography variant=\"h5\" gutterBottom>Positions</Typography>\n\n                        <List >\n                            {positions.map((position, index) => (\n                                <ListItem key={position} style={{height: 30}} role={undefined} value={position} button onClick={handlePositions(position)}>\n                                    <ListItemIcon>\n                                        <Checkbox \n                                            size=\"small\"\n                                            edge=\"start\"\n                                            checked={employee.positions.indexOf(position) !== -1}\n                                            tabIndex={-1}\n                                            style={{background: \"transparent\"}}\n                                            disableRipple\n                                        />\n                                        <ListItemText style={{marginTop:7}} id={index} primary={position}/>\n                                    </ListItemIcon>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </Paper>\n\n                    <Grid item >\n                        <Paper className={classes.paper} elevation={8}>\n\n                            <Typography variant=\"h5\" gutterBottom>Availability</Typography>\n                            <AvailabilityComponent employee={employee} employeeAvailability={employee.availability} getAvailability={getAvailability} />\n\n                        </Paper>\n                    </Grid>\n\n                </Grid>\n\n                <Button className={classes.submitButton} variant=\"contained\" color=\"primary\" size=\"large\"  type='submit' fullWidth>{currentId ? 'Update' : 'Submit'}</Button>\n                <Button className={classes.clearButton} variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n\n                </form>\n            </Grid>\n        </Card>\n    )\n}\n\nexport default EmployeeForm\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/homePage/generateScheduleButton/GenerateScheduleButton.js",["345","346","347","348","349","350","351","352","353","354","355","356"],"import { Button, Typography, Grid } from \"@material-ui/core\"\nimport { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { editEmployee, getEmployees } from '../../../actions/employees'\nimport weekShifts from '../../../testData/weekShifts'\nimport theme from '../../../themes/mintTheme'\n\n\nconst GenerateScheduleButton = ({setPage}) => {\n    let shifts = weekShifts\n    const dispatch = useDispatch()\n    const employees = useSelector((state) => state.employees)\n    let scheduledEmployees = []\n    let excessShifts = []\n    const [employee, setEmployee] = useState(null)\n    const [schedule, setSchedule] = useState(null)\n    const [scheduleStack, setScheduleStack] = useState([])\n    const [currentId, setCurrentId] = useState(null)\n    const NOON = 12\n\n\n    const randomizeShifts = (array) => {\n        let shuffledArray = []\n\n        let shift = null\n\n        for (let i = array.length - 1; i >= 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n            shift = array[i]\n\n            for (let x = shift.length - 1; x >= 0; x--) {\n                const y = Math.floor(Math.random() * (x + 1));\n                [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n                shift = array[i][x]\n                shuffledArray.push(shift)\n            }\n        }\n        return shuffledArray\n    }\n\n\n    const randomizeEmployees = (array) => {\n        for (let i = array.length - 1; i >= 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n\n    const createSchedule = (shifts) => {\n        let i = 0\n        let dayOff = []\n        scheduledEmployees = []\n        excessShifts = []\n        let blankEmployees = eraseSchedules(employees)\n        randomizeEmployees(blankEmployees)\n\n        blankEmployees.forEach((employee) => {\n            let randomDay = Math.floor(Math.random() * 7)\n            dayOff.push(randomDay)\n        })\n        \n        while(shifts.length > 0) {\n            let randomShift = Math.floor(Math.random() * shifts.length)\n            let shift = shifts[randomShift]\n\n            let currentEmployee = blankEmployees[i]\n            let currentDayOff = dayOff[i]\n            let currentEmployeeId = currentEmployee._id\n            \n            const isEmployeeAvailable = canEmployeeTakeShift(currentEmployee, shift, currentDayOff)\n\n            if(isEmployeeAvailable && \n                (currentEmployee.numHours <= currentEmployee.desiredHours.replace(/\\D/g, \"\").slice(-2) ||\n                currentEmployee.desiredHours.replace(/\\D/g, \"\").slice(-2) >= 40)) \n                {\n                    currentEmployee.weekSchedule.push(shift)\n                    calculateNumHours(currentEmployee, shift)\n                    shifts.splice(randomShift,1)\n\n                    if(!scheduledEmployees.some((employee) => employee._id === currentEmployeeId)){\n                        scheduledEmployees.push(currentEmployee)\n                    }\n\n            }\n            else {\n                if (i < blankEmployees.length - 1) {\n                    i++\n                }\n                else {\n                    i=0\n                    excessShifts.push(shift)\n                    shifts.splice(randomShift,1)\n                }\n            }\n\n        }\n    }\n\n\n    const canEmployeeTakeShift = (employee, shift, currentDayOff) => {\n        const date = new Date(shift.startDate)\n        const dayOfWeek = date.getDay()\n        const shiftStartTime = convertTimeToNumber(shift.startDate.split(' ').[4])\n        const day = shift.startDate.split(' ').[0]\n        const availabilityDay = dayOfWeek === 0 ? 6 : dayOfWeek - 1\n        const isAvailableMorning = employee.availability[availabilityDay].morning\n        const isAvailableEvening = employee.availability[availabilityDay].evening\n        const isMorningShift = shiftStartTime < NOON ? true : false\n        const isAlreadyWorking = checkIfWorking(employee, day, isMorningShift)\n        const isTrained = checkIfTrained(employee, shift)\n\n        return isAlreadyWorking ? false\n                : !isTrained ? false\n                : dayOfWeek == currentDayOff ? false\n                : isMorningShift && isAvailableMorning ? true\n                : !isMorningShift && isAvailableEvening ? true\n                : false\n    }\n\n\n    const checkIfWorking = (employee, day, isMorningShift) => {\n        let numShiftsInDay = 0\n        employee.weekSchedule.forEach((shift) => {\n            if( shift.startDate.includes(day) ) {\n                numShiftsInDay++\n            }\n        })\n        if( numShiftsInDay > 1 ) return true\n        \n        const employeeShift = employee.weekSchedule.find( shift => shift.startDate.includes(day) )\n\n        if ( employeeShift ) {\n            const employeeShiftTime = convertTimeToNumber( employeeShift.startDate.split(' ').[4] )\n\n            if(isMorningShift && employeeShiftTime < NOON) return true\n            if(isMorningShift && employeeShiftTime > NOON) return false\n            if(!isMorningShift && employeeShiftTime > NOON) return true\n            if(!isMorningShift && employeeShiftTime > NOON) return false\n        }\n\n        return false\n        \n    }\n\n\n    const calculateNumHours = (employee, shift) => {\n        let startTime = convertTimeToNumber(shift.startDate.split(' ').[4])\n        let endTime = convertTimeToNumber(shift.endDate.split(' ').[4])\n        let shiftHours = endTime - startTime\n        employee.numHours += shiftHours\n    }\n\n\n    const checkIfTrained = (employee, shift) => {\n        const position = shift.title\n        let isTrained = false\n\n        employee.positions.forEach((pos) => {\n            if(position.trim()===pos.trim()) {\n                isTrained = true\n            }\n        })\n        return isTrained\n    }\n\n\n    const convertTimeToNumber = (time) => {\n        var hoursMinutes = time.split(/[.:]/);\n        var hours = parseInt(hoursMinutes[0], 10);\n        var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n        return hours + minutes / 60;\n    }\n\n\n    const saveEmployees = ( scheduledEmployees ) => {\n        scheduledEmployees.forEach(( employee ) => {\n            dispatch( editEmployee( employee._id, employee ))\n        })\n    }\n\n\n    const eraseSchedules = (employees) => {\n        let blankEmployees = []\n        employees.forEach((employee) => {\n            let tempEmployee = {...employee, weekSchedule:[], numHours: 0}\n            blankEmployees.push(tempEmployee)\n        })\n        return blankEmployees\n    }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        try {\n            let randomShiftsArray = randomizeShifts(shifts)\n            createSchedule(randomShiftsArray)\n            console.log(scheduledEmployees)\n            console.log(excessShifts)\n            // setScheduleStack([...scheduleStack, scheduledEmployees] )\n            saveEmployees( scheduledEmployees )\n            setPage(1) \n        } catch (error) {\n            console.log(\"No employees to generate schedule with\")\n        }\n    }\n\n    \n    return (\n        <Grid container direction='column' justify='center' alignItems='center'>\n            <Button style={{ color:theme.palette.primary.main, backgroundColor:theme.palette.background.paper, width: 250, height: 50, marginTop:45, marginBottom:20}} variant='contained' onClick={ handleSubmit }>\n                Generate Schedule\n            </Button>\n        </Grid>\n    )\n}\n\nexport default GenerateScheduleButton\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/calendars/Calendar.js",["357","358","359","360","361","362","363","364","365","366","367"],"import { makeStyles } from '@material-ui/core/styles'\nimport { \n    ViewState, \n    EditingState, \n    IntegratedEditing \n} from '@devexpress/dx-react-scheduler'\nimport { \n    Scheduler, \n    DayView, \n    WeekView,\n    Appointments, \n    AppointmentForm,\n    ConfirmationDialog,\n    AppointmentTooltip,\n    Toolbar,\n    ViewSwitcher,\n    TodayButton,\n    DateNavigator,\n} from '@devexpress/dx-react-scheduler-material-ui'\nimport Card from '@material-ui/core/Card'\nimport { appointments } from '../../testData/testTimes'\nimport shifts from '../../testData/weekShifts'\nimport { useSelector } from 'react-redux'\nimport theme from '../../themes/mintTheme'\n\n\n\nconst Appointment = ({\n    children, style, ...restProps\n  }) => (\n    <Appointments.Appointment\n      {...restProps}\n      style={{\n        ...style,\n        color: 'black',\n        backgroundColor: theme.palette.primary.dark,\n        borderRadius: '10px',\n        borderWidth:1,\n      }}\n    >\n      {children}\n    </Appointments.Appointment>\n);\n\n\nconst Calendar = ({employeesSchedules}) => {\n    const currentDate = new Date()\n    //const nextWeekDate = new Date(currentDate.setDate(currentDate.getDate() + 7))\n    let schedulerData = employeesSchedules ? employeesSchedules : []\n    \n    return (\n        <Scheduler\n            data={schedulerData}\n            firstDayOfWeek={1}\n        >\n            <ViewState\n                defaultCurrentDate={currentDate}\n            />\n            <DayView\n                startDayHour={7}\n                cellDuration={60}\n                endDayHour={23}\n            />\n            {/* <WeekView\n                startDayHour={7}\n                cellDuration={60}\n                endDayHour={23}\n            /> */}\n            <Toolbar />\n            {/* <ViewSwitcher /> */}\n            <Appointments appointmentComponent={Appointment} />\n            <AppointmentTooltip \n                showCloseButton\n            />\n            <TodayButton />\n            <DateNavigator />\n        </Scheduler>\n    )\n}\n\nexport default Calendar","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/calendars/PersonalCalendar.js",["368","369","370","371","372","373"],"import { makeStyles } from '@material-ui/core/styles'\nimport { \n    ViewState, \n    EditingState, \n    IntegratedEditing \n} from '@devexpress/dx-react-scheduler'\nimport { \n    Scheduler, \n    DayView, \n    WeekView,\n    Appointments, \n    AppointmentTooltip,\n    Toolbar,\n    ViewSwitcher,\n    TodayButton,\n    DateNavigator,\n} from '@devexpress/dx-react-scheduler-material-ui'\nimport Card from '@material-ui/core/Card'\nimport theme from '../../themes/mintTheme'\nimport { testEmployees } from '../../testData/testEmployees'\n\nconst Appointment = ({\n    children, style, ...restProps\n  }) => (\n    <Appointments.Appointment\n      {...restProps}\n      style={{\n        ...style,\n        color: 'black',\n        backgroundColor: theme.palette.primary.dark,\n        borderRadius: '5px',\n        borderWidth:1,\n      }}\n    >\n      {children}\n    </Appointments.Appointment>\n);\n\nconst PersonalCalendar = ({employee}) => {\n    const currentDate = new Date()\n    const nextWeekDate = new Date(currentDate.setDate(currentDate.getDate() + 7))\n    const employeeWeekSchedule = employee ? employee.weekSchedule : testEmployees\n\n    return (\n            <Scheduler\n                data={employeeWeekSchedule}\n                firstDayOfWeek={1}\n            >\n                <ViewState\n                    defaultCurrentDate={nextWeekDate}\n                />\n                <WeekView\n                    startDayHour={6}\n                    cellDuration={90}\n                    endDayHour={24}\n                />\n                <Toolbar />\n                <Appointments\n                    appointmentComponent={Appointment} \n                    readOnly\n                />\n                <AppointmentTooltip \n                    showCloseButton\n                />\n                <TodayButton />\n                <DateNavigator />\n            </Scheduler>\n    )\n}\n\nexport default PersonalCalendar","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/schedulePage/dropDownMenu/DropDownMenuEmployees.js",["374","375","376","377"],"import { useSelector } from 'react-redux'\nimport { useState } from 'react'\nimport { Menu, MenuItem, IconButton, Fade, Button } from '@material-ui/core'\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline'\n\n\nconst DropDownMenuEmployees = ({selectedEmployee, setSelectedEmployee}) => {\n    const employees = useSelector((state) => state.employees)\n    const ITEM_HEIGHT = 50\n    const [anchorEl, setAnchorEl] = useState(null)\n    const open = Boolean(anchorEl)\n    let fullName = selectedEmployee ? selectedEmployee.firstName + \" \" + selectedEmployee.lastName : \"\"\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget)\n    }\n    \n    const handleClose = (event) => {\n        setAnchorEl(null);\n    }\n    \n    const menuItemClick = (event) => {\n        const name = event.target.innerText\n\n        if(name) {\n            const fullEmployee = employees.find((employee) => {\n                const fullName = `${employee.firstName} ${employee.lastName}`\n    \n                if(fullName.trim() === name.trim()){\n                    return employee\n                }\n\n            })\n            setSelectedEmployee(fullEmployee)\n        }\n        handleClose()\n    }\n\n\n    return (\n        <div>\n            <Button\n                style={{height:45, width:250, fontSize:18}}\n                aria-label=\"more\"\n                aria-controls=\"long-menu\"\n                aria-haspopup=\"true\"\n                onClick={handleClick}\n                startIcon={<PersonOutlineIcon color='secondary' style={{fontSize:25}}/>}\n            >\n                {fullName}\n            </Button>\n            <Menu\n                id=\"long-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                // value={option}\n                open={open}\n                onClose={handleClose}\n                onClick={menuItemClick}\n                \n                PaperProps={{\n                    style: {\n                        maxHeight: ITEM_HEIGHT * 4.5,\n                        width: '40ch',\n                    },\n                }}\n            >\n            {employees.map((employee) => (\n                <MenuItem key={employee._id} value={employee._id} >\n                    {employee.firstName} {employee.lastName}\n                </MenuItem>\n            ))}\n            </Menu>\n        </div>\n    )\n}\n\nexport default DropDownMenuEmployees\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/constants/actionTypes.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeCard/styles.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeForm/styles.js",["378"],"import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 20,\n    borderRadius: 10,\n    boxShadow: '0px 0px 25px 0px rgba(0, 0, 0, .7)',\n  },\n\n  title: {\n    margin: 5,\n  },\n\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 8,\n    padding: 10,\n    borderColor: theme.palette.action.disabled\n  },\n\n  submitButton: {\n    color:theme.palette.primary.main, \n    backgroundColor:theme.palette.background.paper,\n    width: 250, \n    height: 50, \n    margin: 5,\n    marginBottom: 10,\n    width: '60%',\n    [theme.breakpoints.down('sm')]: {\n      width: '90%'\n    }\n  },\n\n  clearButton: {\n    color: theme.palette.secondary.main, \n    backgroundColor: theme.palette.background.paper,\n    margin: 5,\n    marginBottom: 15,\n    width: '60%',\n    [theme.breakpoints.down('sm')]: {\n      width: '90%'\n    }\n  },\n\n}));","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/constants/positions.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/api/index.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/formatAndValidations/formatPhoneNumber.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/formatAndValidations/validateEmail.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/components/employeesPage/employeeForm/availabilityComponent/AvailabilityComponent.js",["379","380"],"import { Card, Grid, Typography, IconButton} from '@material-ui/core'\nimport DayIcon from '@material-ui/icons/WbSunnyTwoTone'\nimport NightIcon from '@material-ui/icons/NightsStayTwoTone'\nimport { useState, useEffect } from 'react'\n\nconst AvailabilityComponent = ({ employee, getAvailability }) => {\n    const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']\n    const [availability, setAvailability] = useState(employee.availability)\n\n    useEffect(() => {\n        if(employee)setAvailability(employee.availability)\n    }, [employee])\n\n    \n    const handleDayButton = (index) => e => {\n        const newAvailability = [...availability]\n        newAvailability[index].morning = !availability[index].morning\n        setAvailability(newAvailability)\n        getAvailability(newAvailability)\n    }\n    \n    const handleNightButton = (index) => e => {\n        const newAvailability = [...availability]\n        newAvailability[index].evening = !availability[index].evening\n        setAvailability(newAvailability)\n        getAvailability(newAvailability)\n    }\n\n    return (\n        <Grid container justify=\"center\" direction=\"column\" align=\"center\" xs={12} spacing={0}>\n            \n            <Grid item container justify=\"space-around\" direction=\"row\"  spacing={0}>\n                <Typography gutterBottom>Mon</Typography>\n                <Typography>Tue</Typography>\n                <Typography >Wed</Typography>\n                <Typography style={{paddingRight: 8}}>Thu</Typography>\n                <Typography style={{paddingRight: 10}}>Fri</Typography>\n                <Typography style={{paddingRight: 8}}>Sat</Typography>\n                <Typography>Sun</Typography>\n            </Grid>\n\n            <Grid item container justify=\"space-around\" direction=\"row\" spacing={0}>\n                {availability.map((day, index) => {\n\n                    return(\n                        <IconButton\n                            value={day.morning}\n                            name={day.day}\n                            size=\"small\"\n                            style={{marginBottom: 15}}\n                            onClick={handleDayButton(index)}\n                        >\n                            {day.morning ?\n                                <DayIcon color=\"secondary\" /> :\n                                <DayIcon color=\"disabled\" /> \n                            }\n                        </IconButton>\n                    )\n\n                })}\n            </Grid>\n\n\n            <Grid item container justify=\"space-around\" direction=\"row\" spacing={0}>\n                {availability.map((day, index) => {\n\n                    return(\n                        <IconButton\n                            value={day.evening}\n                            name={day.day}\n                            size=\"small\"\n                            style={{marginBottom: 15}}\n                            onClick={handleNightButton(index)}\n                        >\n                            {day.evening ?\n                                <NightIcon color=\"secondary\" /> :\n                                <NightIcon color=\"disabled\" /> \n                            }\n                        </IconButton>\n                    )\n                    \n                })}\n            </Grid>\n\n        </Grid>\n    )\n}\n\nexport default AvailabilityComponent\n","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/testData/weekShifts.js",["381"],"const date = new Date()\n\nconst floaterMorningStartTime = [7, 30, 0];\nconst floaterMorningEndTime = [16, 0, 0];\nconst floaterEveningStartTime = [15, 30, 0];\nconst floaterEveningEndTime = [22, 30, 0];\n\nconst coldLineMorningStartTime = [8, 30, 0];\nconst coldLineMorningEndTime = [16, 0, 0];\nconst coldLineEveningStartTime = [16, 0, 0];\nconst coldLineEveningEndTime = [22, 30, 0];\n\nconst hotLineMorningStartTime = [9, 30, 0];\nconst hotLineMorningEndTime = [16, 0, 0];\nconst hotLineEveningStartTime = [16, 0, 0];\nconst hotLineEveningEndTime = [22, 30, 0];\n\nconst backupHotLineEveningStartTime = [17, 0, 0];\nconst backupHotLineEveningEndTime = [21, 0, 0];\n\nconst cashierMorningStartTime = [8, 30, 0];\nconst cashierMorningEndTime = [16, 0, 0];\nconst cashierEveningStartTime = [16, 0, 0];\nconst cashierEveningEndTime = [22, 30, 0];\n\nconst backupCashierMorningStartTime = [9, 30, 0];\nconst backupCashierMorningEndTime = [16, 0, 0];\nconst backupCashierEveningStartTime = [16, 0, 0];\nconst backupCashierEveningEndTime = [22, 30, 0];\n\nconst maintenanceMorningStartTime = [9, 0, 0];\nconst maintenanceMorningEndTime = [16, 0, 0];\nconst maintenanceEveningStartTime = [16, 0, 0];\nconst maintenanceEveningEndTime = [22, 30, 0];\n\nconst meatPrepMorningStartTime = [9, 0, 0];\nconst meatPrepMorningEndTime = [16, 0, 0];\nconst meatPrepEveningStartTime = [16, 0, 0];\nconst meatPrepEveningEndTime = [22, 30, 0];\n\nconst veggiePrepMorningStartTime = [8, 0, 0];\nconst veggiePrepMorningEndTime = [16, 0, 0];\n\n\n\n\nlet sunday = new Date(date)\nlet monday = new Date(date)\nlet tuesday = new Date(date)\nlet wednesday = new Date(date)\nlet thursday = new Date(date)\nlet friday = new Date(date)\nlet saturday = new Date(date)\n\n\nswitch (date.getDay()) {\n    case 0:\n        sunday = new Date(sunday.setDate(sunday.getDate() - 0 + 7))\n        monday = new Date(monday.setDate(monday.getDate() + 1 + 7))\n        tuesday = new Date(tuesday.setDate(tuesday.getDate() + 2 + 7))\n        wednesday = new Date(wednesday.setDate(wednesday.getDate() + 3 + 7))\n        thursday = new Date(thursday.setDate(thursday.getDate() + 4 + 7))\n        friday = new Date(friday.setDate(friday.getDate() + 5 + 7))\n        saturday = new Date(saturday.setDate(saturday.getDate() + 6 + 7))\n        break;\n    case 1:\n        sunday = new Date(sunday.setDate(sunday.getDate() + 6 + 7))\n        monday = new Date(monday.setDate(monday.getDate() - 0 + 7))\n        tuesday = new Date(tuesday.setDate(tuesday.getDate() + 1 + 7))\n        wednesday = new Date(wednesday.setDate(wednesday.getDate() + 2 + 7))\n        thursday = new Date(thursday.setDate(thursday.getDate() + 3 + 7))\n        friday = new Date(friday.setDate(friday.getDate() + 4 + 7))\n        saturday = new Date(saturday.setDate(saturday.getDate() + 5 + 7))\n        break;\n    case 2:\n        sunday = new Date(sunday.setDate(sunday.getDate() + 5 + 7))\n        monday = new Date(monday.setDate(monday.getDate() - 1 + 7))\n        tuesday = new Date(tuesday.setDate(tuesday.getDate() - 0 + 7))\n        wednesday = new Date(wednesday.setDate(wednesday.getDate() + 1 + 7))\n        thursday = new Date(thursday.setDate(thursday.getDate() + 2 + 7))\n        friday = new Date(friday.setDate(friday.getDate() + 3 + 7))\n        saturday = new Date(saturday.setDate(saturday.getDate() + 4 + 7))\n        break;\n    case 3:\n        sunday = new Date(sunday.setDate(sunday.getDate() + 4 + 7))\n        monday = new Date(monday.setDate(monday.getDate() - 2 + 7))\n        tuesday = new Date(tuesday.setDate(tuesday.getDate() - 1 + 7))\n        wednesday = new Date(wednesday.setDate(wednesday.getDate() - 0 + 7))\n        thursday = new Date(thursday.setDate(thursday.getDate() + 1 + 7))\n        friday = new Date(friday.setDate(friday.getDate() + 2 + 7))\n        saturday = new Date(saturday.setDate(saturday.getDate() + 3 + 7))\n        break;\n    case 4:\n        sunday = new Date(sunday.setDate(sunday.getDate() + 3 + 7))\n        monday = new Date(monday.setDate(monday.getDate() - 3 + 7))\n        tuesday = new Date(tuesday.setDate(tuesday.getDate() - 2 + 7))\n        wednesday = new Date(wednesday.setDate(wednesday.getDate() - 1 + 7))\n        thursday = new Date(thursday.setDate(thursday.getDate() - 0 + 7))\n        friday = new Date(friday.setDate(friday.getDate() + 1 + 7))\n        saturday = new Date(saturday.setDate(saturday.getDate() + 2 + 7))\n        break;\n    case 5:\n        sunday = new Date(sunday.setDate(sunday.getDate() + 2 + 7))\n        monday = new Date(monday.setDate(monday.getDate() - 4 + 7))\n        tuesday = new Date(tuesday.setDate(tuesday.getDate() - 3 + 7))\n        wednesday = new Date(wednesday.setDate(wednesday.getDate() - 2 + 7))\n        thursday = new Date(thursday.setDate(thursday.getDate() - 1 + 7))\n        friday = new Date(friday.setDate(friday.getDate() + 0 + 7))\n        saturday = new Date(saturday.setDate(saturday.getDate() + 1 + 7))\n        break;\n    case 6:\n        sunday = new Date(sunday.setDate(sunday.getDate() + 1 + 7))\n        monday = new Date(monday.setDate(monday.getDate() - 5 + 7))\n        tuesday = new Date(tuesday.setDate(tuesday.getDate() - 4 + 7))\n        wednesday = new Date(wednesday.setDate(wednesday.getDate() - 3 + 7))\n        thursday = new Date(thursday.setDate(thursday.getDate() - 2 + 7))\n        friday = new Date(friday.setDate(friday.getDate() - 1 + 7))\n        saturday = new Date(saturday.setDate(saturday.getDate() + 0 + 7))\n        break;\n}\n\n\nconst shifts = [\n\n    //--------Sunday shifts--------\n    [\n        //--------Sunday morning shifts--------\n        {\n            title: \"Floater\",\n            startDate: `${sunday = new Date(sunday.setHours(floaterMorningStartTime[0], floaterMorningStartTime[1], floaterMorningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(floaterMorningEndTime[0], floaterMorningEndTime[1], floaterMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${sunday = new Date(sunday.setHours(coldLineMorningStartTime[0], coldLineMorningStartTime[1], coldLineMorningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(coldLineMorningEndTime[0], coldLineMorningEndTime[1], coldLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${sunday = new Date(sunday.setHours(hotLineMorningStartTime[0], hotLineMorningStartTime[1], hotLineMorningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(hotLineMorningEndTime[0], hotLineMorningEndTime[1], hotLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${sunday = new Date(sunday.setHours(cashierMorningStartTime[0], cashierMorningStartTime[1], cashierMorningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(cashierMorningEndTime[0], cashierMorningEndTime[1], cashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${sunday = new Date(sunday.setHours(backupCashierMorningStartTime[0], backupCashierMorningStartTime[1], backupCashierMorningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(backupCashierMorningEndTime[0], backupCashierMorningEndTime[1], backupCashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${sunday = new Date(sunday.setHours(maintenanceMorningStartTime[0], maintenanceMorningStartTime[1], maintenanceMorningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(maintenanceMorningEndTime[0], maintenanceMorningEndTime[1], maintenanceMorningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${sunday = new Date(sunday.setHours(meatPrepMorningStartTime[0], meatPrepMorningStartTime[1], meatPrepMorningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(meatPrepMorningEndTime[0], meatPrepMorningEndTime[1], meatPrepMorningEndTime[2]))}`\n        },\n        \n\n\n        //sunday evening shifts\n        {\n            title: \"Floater\",\n            startDate: `${sunday = new Date(sunday.setHours(floaterEveningStartTime[0], floaterEveningStartTime[1], floaterEveningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(floaterEveningEndTime[0], floaterEveningEndTime[1], floaterEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${sunday = new Date(sunday.setHours(coldLineEveningStartTime[0], coldLineEveningStartTime[1], coldLineEveningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(coldLineEveningEndTime[0], coldLineEveningEndTime[1], coldLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${sunday = new Date(sunday.setHours(hotLineEveningStartTime[0], hotLineEveningStartTime[1], hotLineEveningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(hotLineEveningEndTime[0], hotLineEveningEndTime[1], hotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Hot Line\",\n            startDate: `${sunday = new Date(sunday.setHours(backupHotLineEveningStartTime[0], backupHotLineEveningStartTime[1], backupHotLineEveningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(backupHotLineEveningEndTime[0], backupHotLineEveningEndTime[1], backupHotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${sunday = new Date(sunday.setHours(cashierEveningStartTime[0], cashierEveningStartTime[1], cashierEveningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(cashierEveningEndTime[0], cashierEveningEndTime[1], cashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${sunday = new Date(sunday.setHours(backupCashierEveningStartTime[0], backupCashierEveningStartTime[1], backupCashierEveningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(backupCashierEveningEndTime[0], backupCashierEveningEndTime[1], backupCashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${sunday = new Date(sunday.setHours(maintenanceEveningStartTime[0], maintenanceEveningStartTime[1], maintenanceEveningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(maintenanceEveningEndTime[0], maintenanceEveningEndTime[1], maintenanceEveningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${sunday = new Date(sunday.setHours(meatPrepEveningStartTime[0], meatPrepEveningStartTime[1], meatPrepEveningStartTime[2]))}`,\n            endDate: `${sunday = new Date(sunday.setHours(meatPrepEveningEndTime[0], meatPrepEveningEndTime[1], meatPrepEveningEndTime[2]))}`\n        },\n    ],\n\n//---------------------------------------------------//\n//--------------------- Monday ----------------------//\n//---------------------------------------------------//\n//---------------------------------------------------//\n\n    //--------Monday shifts--------\n    [\n        //--------Monday morning shifts--------\n        {\n            title: \"Floater\",\n            startDate: `${monday = new Date(monday.setHours(floaterMorningStartTime[0], floaterMorningStartTime[1], floaterMorningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(floaterMorningEndTime[0], floaterMorningEndTime[1], floaterMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${monday = new Date(monday.setHours(coldLineMorningStartTime[0], coldLineMorningStartTime[1], coldLineMorningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(coldLineMorningEndTime[0], coldLineMorningEndTime[1], coldLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${monday = new Date(monday.setHours(hotLineMorningStartTime[0], hotLineMorningStartTime[1], hotLineMorningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(hotLineMorningEndTime[0], hotLineMorningEndTime[1], hotLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${monday = new Date(monday.setHours(cashierMorningStartTime[0], cashierMorningStartTime[1], cashierMorningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(cashierMorningEndTime[0], cashierMorningEndTime[1], cashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${monday = new Date(monday.setHours(backupCashierMorningStartTime[0], backupCashierMorningStartTime[1], backupCashierMorningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(backupCashierMorningEndTime[0], backupCashierMorningEndTime[1], backupCashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${monday = new Date(monday.setHours(maintenanceMorningStartTime[0], maintenanceMorningStartTime[1], maintenanceMorningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(maintenanceMorningEndTime[0], maintenanceMorningEndTime[1], maintenanceMorningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${monday = new Date(monday.setHours(meatPrepMorningStartTime[0], meatPrepMorningStartTime[1], meatPrepMorningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(meatPrepMorningEndTime[0], meatPrepMorningEndTime[1], meatPrepMorningEndTime[2]))}`\n        },\n        {\n            title: \"Veggie Prep\",\n            startDate: `${monday = new Date(monday.setHours(veggiePrepMorningStartTime[0], veggiePrepMorningStartTime[1], veggiePrepMorningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(veggiePrepMorningEndTime[0], veggiePrepMorningEndTime[1], veggiePrepMorningEndTime[2]))}`\n        },\n\n        \n\n        //Monday evening shifts\n        {\n            title: \"Floater\",\n            startDate: `${monday = new Date(monday.setHours(floaterEveningStartTime[0], floaterEveningStartTime[1], floaterEveningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(floaterEveningEndTime[0], floaterEveningEndTime[1], floaterEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${monday = new Date(monday.setHours(coldLineEveningStartTime[0], coldLineEveningStartTime[1], coldLineEveningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(coldLineEveningEndTime[0], coldLineEveningEndTime[1], coldLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${monday = new Date(monday.setHours(hotLineEveningStartTime[0], hotLineEveningStartTime[1], hotLineEveningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(hotLineEveningEndTime[0], hotLineEveningEndTime[1], hotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Hot Line\",\n            startDate: `${monday = new Date(monday.setHours(backupHotLineEveningStartTime[0], backupHotLineEveningStartTime[1], backupHotLineEveningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(backupHotLineEveningEndTime[0], backupHotLineEveningEndTime[1], backupHotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${monday = new Date(monday.setHours(cashierEveningStartTime[0], cashierEveningStartTime[1], cashierEveningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(cashierEveningEndTime[0], cashierEveningEndTime[1], cashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${monday = new Date(monday.setHours(backupCashierEveningStartTime[0], backupCashierEveningStartTime[1], backupCashierEveningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(backupCashierEveningEndTime[0], backupCashierEveningEndTime[1], backupCashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${monday = new Date(monday.setHours(maintenanceEveningStartTime[0], maintenanceEveningStartTime[1], maintenanceEveningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(maintenanceEveningEndTime[0], maintenanceEveningEndTime[1], maintenanceEveningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${monday = new Date(monday.setHours(meatPrepEveningStartTime[0], meatPrepEveningStartTime[1], meatPrepEveningStartTime[2]))}`,\n            endDate: `${monday = new Date(monday.setHours(meatPrepEveningEndTime[0], meatPrepEveningEndTime[1], meatPrepEveningEndTime[2]))}`\n        },\n    ],\n\n//---------------------------------------------------//\n//--------------------- Tuesday ---------------------//\n//---------------------------------------------------//\n//---------------------------------------------------//\n\n    //--------tuesday shifts--------\n    [\n        //--------tuesday morning shifts--------\n        {\n            title: \"Floater\",\n            startDate: `${tuesday = new Date(tuesday.setHours(floaterMorningStartTime[0], floaterMorningStartTime[1], floaterMorningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(floaterMorningEndTime[0], floaterMorningEndTime[1], floaterMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${tuesday = new Date(tuesday.setHours(coldLineMorningStartTime[0], coldLineMorningStartTime[1], coldLineMorningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(coldLineMorningEndTime[0], coldLineMorningEndTime[1], coldLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${tuesday = new Date(tuesday.setHours(hotLineMorningStartTime[0], hotLineMorningStartTime[1], hotLineMorningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(hotLineMorningEndTime[0], hotLineMorningEndTime[1], hotLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${tuesday = new Date(tuesday.setHours(cashierMorningStartTime[0], cashierMorningStartTime[1], cashierMorningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(cashierMorningEndTime[0], cashierMorningEndTime[1], cashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${tuesday = new Date(tuesday.setHours(backupCashierMorningStartTime[0], backupCashierMorningStartTime[1], backupCashierMorningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(backupCashierMorningEndTime[0], backupCashierMorningEndTime[1], backupCashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${tuesday = new Date(tuesday.setHours(maintenanceMorningStartTime[0], maintenanceMorningStartTime[1], maintenanceMorningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(maintenanceMorningEndTime[0], maintenanceMorningEndTime[1], maintenanceMorningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${tuesday = new Date(tuesday.setHours(meatPrepMorningStartTime[0], meatPrepMorningStartTime[1], meatPrepMorningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(meatPrepMorningEndTime[0], meatPrepMorningEndTime[1], meatPrepMorningEndTime[2]))}`\n        },\n        {\n            title: \"Veggie Prep\",\n            startDate: `${tuesday = new Date(tuesday.setHours(veggiePrepMorningStartTime[0], veggiePrepMorningStartTime[1], veggiePrepMorningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(veggiePrepMorningEndTime[0], veggiePrepMorningEndTime[1], veggiePrepMorningEndTime[2]))}`\n        },\n\n        \n\n        //tuesday evening shifts\n        {\n            title: \"Floater\",\n            startDate: `${tuesday = new Date(tuesday.setHours(floaterEveningStartTime[0], floaterEveningStartTime[1], floaterEveningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(floaterEveningEndTime[0], floaterEveningEndTime[1], floaterEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${tuesday = new Date(tuesday.setHours(coldLineEveningStartTime[0], coldLineEveningStartTime[1], coldLineEveningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(coldLineEveningEndTime[0], coldLineEveningEndTime[1], coldLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${tuesday = new Date(tuesday.setHours(hotLineEveningStartTime[0], hotLineEveningStartTime[1], hotLineEveningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(hotLineEveningEndTime[0], hotLineEveningEndTime[1], hotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Hot Line\",\n            startDate: `${tuesday = new Date(tuesday.setHours(backupHotLineEveningStartTime[0], backupHotLineEveningStartTime[1], backupHotLineEveningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(backupHotLineEveningEndTime[0], backupHotLineEveningEndTime[1], backupHotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${tuesday = new Date(tuesday.setHours(cashierEveningStartTime[0], cashierEveningStartTime[1], cashierEveningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(cashierEveningEndTime[0], cashierEveningEndTime[1], cashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${tuesday = new Date(tuesday.setHours(backupCashierEveningStartTime[0], backupCashierEveningStartTime[1], backupCashierEveningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(backupCashierEveningEndTime[0], backupCashierEveningEndTime[1], backupCashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${tuesday = new Date(tuesday.setHours(maintenanceEveningStartTime[0], maintenanceEveningStartTime[1], maintenanceEveningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(maintenanceEveningEndTime[0], maintenanceEveningEndTime[1], maintenanceEveningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${tuesday = new Date(tuesday.setHours(meatPrepEveningStartTime[0], meatPrepEveningStartTime[1], meatPrepEveningStartTime[2]))}`,\n            endDate: `${tuesday = new Date(tuesday.setHours(meatPrepEveningEndTime[0], meatPrepEveningEndTime[1], meatPrepEveningEndTime[2]))}`\n        },\n    ],\n\n//---------------------------------------------------//\n//--------------------- Wednesday -------------------//\n//---------------------------------------------------//\n//---------------------------------------------------//\n\n    //--------Wednesday shifts--------\n    [\n        //--------Wednesday morning shifts--------\n        {\n            title: \"Floater\",\n            startDate: `${wednesday = new Date(wednesday.setHours(floaterMorningStartTime[0], floaterMorningStartTime[1], floaterMorningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(floaterMorningEndTime[0], floaterMorningEndTime[1], floaterMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${wednesday = new Date(wednesday.setHours(coldLineMorningStartTime[0], coldLineMorningStartTime[1], coldLineMorningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(coldLineMorningEndTime[0], coldLineMorningEndTime[1], coldLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${wednesday = new Date(wednesday.setHours(hotLineMorningStartTime[0], hotLineMorningStartTime[1], hotLineMorningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(hotLineMorningEndTime[0], hotLineMorningEndTime[1], hotLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${wednesday = new Date(wednesday.setHours(cashierMorningStartTime[0], cashierMorningStartTime[1], cashierMorningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(cashierMorningEndTime[0], cashierMorningEndTime[1], cashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${wednesday = new Date(wednesday.setHours(backupCashierMorningStartTime[0], backupCashierMorningStartTime[1], backupCashierMorningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(backupCashierMorningEndTime[0], backupCashierMorningEndTime[1], backupCashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${wednesday = new Date(wednesday.setHours(maintenanceMorningStartTime[0], maintenanceMorningStartTime[1], maintenanceMorningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(maintenanceMorningEndTime[0], maintenanceMorningEndTime[1], maintenanceMorningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${wednesday = new Date(wednesday.setHours(meatPrepMorningStartTime[0], meatPrepMorningStartTime[1], meatPrepMorningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(meatPrepMorningEndTime[0], meatPrepMorningEndTime[1], meatPrepMorningEndTime[2]))}`\n        },\n        {\n            title: \"Veggie Prep\",\n            startDate: `${wednesday = new Date(wednesday.setHours(veggiePrepMorningStartTime[0], veggiePrepMorningStartTime[1], veggiePrepMorningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(veggiePrepMorningEndTime[0], veggiePrepMorningEndTime[1], veggiePrepMorningEndTime[2]))}`\n        },\n\n        \n\n        //wednesday evening shifts\n        {\n            title: \"Floater\",\n            startDate: `${wednesday = new Date(wednesday.setHours(floaterEveningStartTime[0], floaterEveningStartTime[1], floaterEveningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(floaterEveningEndTime[0], floaterEveningEndTime[1], floaterEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${wednesday = new Date(wednesday.setHours(coldLineEveningStartTime[0], coldLineEveningStartTime[1], coldLineEveningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(coldLineEveningEndTime[0], coldLineEveningEndTime[1], coldLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${wednesday = new Date(wednesday.setHours(hotLineEveningStartTime[0], hotLineEveningStartTime[1], hotLineEveningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(hotLineEveningEndTime[0], hotLineEveningEndTime[1], hotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Hot Line\",\n            startDate: `${wednesday = new Date(wednesday.setHours(backupHotLineEveningStartTime[0], backupHotLineEveningStartTime[1], backupHotLineEveningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(backupHotLineEveningEndTime[0], backupHotLineEveningEndTime[1], backupHotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${wednesday = new Date(wednesday.setHours(cashierEveningStartTime[0], cashierEveningStartTime[1], cashierEveningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(cashierEveningEndTime[0], cashierEveningEndTime[1], cashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${wednesday = new Date(wednesday.setHours(backupCashierEveningStartTime[0], backupCashierEveningStartTime[1], backupCashierEveningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(backupCashierEveningEndTime[0], backupCashierEveningEndTime[1], backupCashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${wednesday = new Date(wednesday.setHours(maintenanceEveningStartTime[0], maintenanceEveningStartTime[1], maintenanceEveningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(maintenanceEveningEndTime[0], maintenanceEveningEndTime[1], maintenanceEveningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${wednesday = new Date(wednesday.setHours(meatPrepEveningStartTime[0], meatPrepEveningStartTime[1], meatPrepEveningStartTime[2]))}`,\n            endDate: `${wednesday = new Date(wednesday.setHours(meatPrepEveningEndTime[0], meatPrepEveningEndTime[1], meatPrepEveningEndTime[2]))}`\n        },\n    ],\n\n//---------------------------------------------------//\n//--------------------- Thursday --------------------//\n//---------------------------------------------------//\n//---------------------------------------------------//\n\n    //--------Thursday shifts--------\n    [\n        //--------Thursday morning shifts--------\n        {\n            title: \"Floater\",\n            startDate: `${thursday = new Date(thursday.setHours(floaterMorningStartTime[0], floaterMorningStartTime[1], floaterMorningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(floaterMorningEndTime[0], floaterMorningEndTime[1], floaterMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${thursday = new Date(thursday.setHours(coldLineMorningStartTime[0], coldLineMorningStartTime[1], coldLineMorningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(coldLineMorningEndTime[0], coldLineMorningEndTime[1], coldLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${thursday = new Date(thursday.setHours(hotLineMorningStartTime[0], hotLineMorningStartTime[1], hotLineMorningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(hotLineMorningEndTime[0], hotLineMorningEndTime[1], hotLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${thursday = new Date(thursday.setHours(cashierMorningStartTime[0], cashierMorningStartTime[1], cashierMorningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(cashierMorningEndTime[0], cashierMorningEndTime[1], cashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${thursday = new Date(thursday.setHours(backupCashierMorningStartTime[0], backupCashierMorningStartTime[1], backupCashierMorningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(backupCashierMorningEndTime[0], backupCashierMorningEndTime[1], backupCashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${thursday = new Date(thursday.setHours(maintenanceMorningStartTime[0], maintenanceMorningStartTime[1], maintenanceMorningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(maintenanceMorningEndTime[0], maintenanceMorningEndTime[1], maintenanceMorningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${thursday = new Date(thursday.setHours(meatPrepMorningStartTime[0], meatPrepMorningStartTime[1], meatPrepMorningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(meatPrepMorningEndTime[0], meatPrepMorningEndTime[1], meatPrepMorningEndTime[2]))}`\n        },\n        {\n            title: \"Veggie Prep\",\n            startDate: `${thursday = new Date(thursday.setHours(veggiePrepMorningStartTime[0], veggiePrepMorningStartTime[1], veggiePrepMorningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(veggiePrepMorningEndTime[0], veggiePrepMorningEndTime[1], veggiePrepMorningEndTime[2]))}`\n        },\n\n        \n\n        //thursday evening shifts\n        {\n            title: \"Floater\",\n            startDate: `${thursday = new Date(thursday.setHours(floaterEveningStartTime[0], floaterEveningStartTime[1], floaterEveningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(floaterEveningEndTime[0], floaterEveningEndTime[1], floaterEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${thursday = new Date(thursday.setHours(coldLineEveningStartTime[0], coldLineEveningStartTime[1], coldLineEveningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(coldLineEveningEndTime[0], coldLineEveningEndTime[1], coldLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${thursday = new Date(thursday.setHours(hotLineEveningStartTime[0], hotLineEveningStartTime[1], hotLineEveningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(hotLineEveningEndTime[0], hotLineEveningEndTime[1], hotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Hot Line\",\n            startDate: `${thursday = new Date(thursday.setHours(backupHotLineEveningStartTime[0], backupHotLineEveningStartTime[1], backupHotLineEveningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(backupHotLineEveningEndTime[0], backupHotLineEveningEndTime[1], backupHotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${thursday = new Date(thursday.setHours(cashierEveningStartTime[0], cashierEveningStartTime[1], cashierEveningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(cashierEveningEndTime[0], cashierEveningEndTime[1], cashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${thursday = new Date(thursday.setHours(backupCashierEveningStartTime[0], backupCashierEveningStartTime[1], backupCashierEveningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(backupCashierEveningEndTime[0], backupCashierEveningEndTime[1], backupCashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${thursday = new Date(thursday.setHours(maintenanceEveningStartTime[0], maintenanceEveningStartTime[1], maintenanceEveningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(maintenanceEveningEndTime[0], maintenanceEveningEndTime[1], maintenanceEveningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${thursday = new Date(thursday.setHours(meatPrepEveningStartTime[0], meatPrepEveningStartTime[1], meatPrepEveningStartTime[2]))}`,\n            endDate: `${thursday = new Date(thursday.setHours(meatPrepEveningEndTime[0], meatPrepEveningEndTime[1], meatPrepEveningEndTime[2]))}`\n        },\n    ],\n\n//---------------------------------------------------//\n//--------------------- Friday ----------------------//\n//---------------------------------------------------//\n//---------------------------------------------------//\n\n    //--------Friday shifts--------\n    [\n        //--------Friday morning shifts--------\n        {\n            title: \"Floater\",\n            startDate: `${friday = new Date(friday.setHours(floaterMorningStartTime[0], floaterMorningStartTime[1], floaterMorningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(floaterMorningEndTime[0], floaterMorningEndTime[1], floaterMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${friday = new Date(friday.setHours(coldLineMorningStartTime[0], coldLineMorningStartTime[1], coldLineMorningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(coldLineMorningEndTime[0], coldLineMorningEndTime[1], coldLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${friday = new Date(friday.setHours(hotLineMorningStartTime[0], hotLineMorningStartTime[1], hotLineMorningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(hotLineMorningEndTime[0], hotLineMorningEndTime[1], hotLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${friday = new Date(friday.setHours(cashierMorningStartTime[0], cashierMorningStartTime[1], cashierMorningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(cashierMorningEndTime[0], cashierMorningEndTime[1], cashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${friday = new Date(friday.setHours(backupCashierMorningStartTime[0], backupCashierMorningStartTime[1], backupCashierMorningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(backupCashierMorningEndTime[0], backupCashierMorningEndTime[1], backupCashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${friday = new Date(friday.setHours(maintenanceMorningStartTime[0], maintenanceMorningStartTime[1], maintenanceMorningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(maintenanceMorningEndTime[0], maintenanceMorningEndTime[1], maintenanceMorningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${friday = new Date(friday.setHours(meatPrepMorningStartTime[0], meatPrepMorningStartTime[1], meatPrepMorningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(meatPrepMorningEndTime[0], meatPrepMorningEndTime[1], meatPrepMorningEndTime[2]))}`\n        },\n        {\n            title: \"Veggie Prep\",\n            startDate: `${friday = new Date(friday.setHours(veggiePrepMorningStartTime[0], veggiePrepMorningStartTime[1], veggiePrepMorningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(veggiePrepMorningEndTime[0], veggiePrepMorningEndTime[1], veggiePrepMorningEndTime[2]))}`\n        },\n\n        \n\n        //friday evening shifts\n        {\n            title: \"Floater\",\n            startDate: `${friday = new Date(friday.setHours(floaterEveningStartTime[0], floaterEveningStartTime[1], floaterEveningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(floaterEveningEndTime[0], floaterEveningEndTime[1], floaterEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${friday = new Date(friday.setHours(coldLineEveningStartTime[0], coldLineEveningStartTime[1], coldLineEveningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(coldLineEveningEndTime[0], coldLineEveningEndTime[1], coldLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${friday = new Date(friday.setHours(hotLineEveningStartTime[0], hotLineEveningStartTime[1], hotLineEveningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(hotLineEveningEndTime[0], hotLineEveningEndTime[1], hotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Hot Line\",\n            startDate: `${friday = new Date(friday.setHours(backupHotLineEveningStartTime[0], backupHotLineEveningStartTime[1], backupHotLineEveningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(backupHotLineEveningEndTime[0], backupHotLineEveningEndTime[1], backupHotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${friday = new Date(friday.setHours(cashierEveningStartTime[0], cashierEveningStartTime[1], cashierEveningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(cashierEveningEndTime[0], cashierEveningEndTime[1], cashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${friday = new Date(friday.setHours(backupCashierEveningStartTime[0], backupCashierEveningStartTime[1], backupCashierEveningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(backupCashierEveningEndTime[0], backupCashierEveningEndTime[1], backupCashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${friday = new Date(friday.setHours(maintenanceEveningStartTime[0], maintenanceEveningStartTime[1], maintenanceEveningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(maintenanceEveningEndTime[0], maintenanceEveningEndTime[1], maintenanceEveningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${friday = new Date(friday.setHours(meatPrepEveningStartTime[0], meatPrepEveningStartTime[1], meatPrepEveningStartTime[2]))}`,\n            endDate: `${friday = new Date(friday.setHours(meatPrepEveningEndTime[0], meatPrepEveningEndTime[1], meatPrepEveningEndTime[2]))}`\n        },\n    ],\n\n//---------------------------------------------------//\n//--------------------- Saturday --------------------//\n//---------------------------------------------------//\n//---------------------------------------------------//\n\n    //--------Saturday shifts--------\n    [\n        //--------Saturday morning shifts--------\n        {\n            title: \"Floater\",\n            startDate: `${saturday = new Date(saturday.setHours(floaterMorningStartTime[0], floaterMorningStartTime[1], floaterMorningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(floaterMorningEndTime[0], floaterMorningEndTime[1], floaterMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${saturday = new Date(saturday.setHours(coldLineMorningStartTime[0], coldLineMorningStartTime[1], coldLineMorningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(coldLineMorningEndTime[0], coldLineMorningEndTime[1], coldLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${saturday = new Date(saturday.setHours(hotLineMorningStartTime[0], hotLineMorningStartTime[1], hotLineMorningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(hotLineMorningEndTime[0], hotLineMorningEndTime[1], hotLineMorningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${saturday = new Date(saturday.setHours(cashierMorningStartTime[0], cashierMorningStartTime[1], cashierMorningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(cashierMorningEndTime[0], cashierMorningEndTime[1], cashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${saturday = new Date(saturday.setHours(backupCashierMorningStartTime[0], backupCashierMorningStartTime[1], backupCashierMorningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(backupCashierMorningEndTime[0], backupCashierMorningEndTime[1], backupCashierMorningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${saturday = new Date(saturday.setHours(maintenanceMorningStartTime[0], maintenanceMorningStartTime[1], maintenanceMorningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(maintenanceMorningEndTime[0], maintenanceMorningEndTime[1], maintenanceMorningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${saturday = new Date(saturday.setHours(meatPrepMorningStartTime[0], meatPrepMorningStartTime[1], meatPrepMorningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(meatPrepMorningEndTime[0], meatPrepMorningEndTime[1], meatPrepMorningEndTime[2]))}`\n        },\n        // {\n        //     title: \"Veggie Prep\",\n        //     startDate: `${saturday = new Date(saturday.setHours(veggiePrepMorningStartTime[0], veggiePrepMorningStartTime[1], veggiePrepMorningStartTime[2]))}`,\n        //     endDate: `${saturday = new Date(saturday.setHours(veggiePrepMorningEndTime[0], veggiePrepMorningEndTime[1], veggiePrepMorningEndTime[2]))}`\n        // },\n\n        \n\n        //saturday evening shifts\n        {\n            title: \"Floater\",\n            startDate: `${saturday = new Date(saturday.setHours(floaterEveningStartTime[0], floaterEveningStartTime[1], floaterEveningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(floaterEveningEndTime[0], floaterEveningEndTime[1], floaterEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cold Line\",\n            startDate: `${saturday = new Date(saturday.setHours(coldLineEveningStartTime[0], coldLineEveningStartTime[1], coldLineEveningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(coldLineEveningEndTime[0], coldLineEveningEndTime[1], coldLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Hot Line\",\n            startDate: `${saturday = new Date(saturday.setHours(hotLineEveningStartTime[0], hotLineEveningStartTime[1], hotLineEveningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(hotLineEveningEndTime[0], hotLineEveningEndTime[1], hotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Hot Line\",\n            startDate: `${saturday = new Date(saturday.setHours(backupHotLineEveningStartTime[0], backupHotLineEveningStartTime[1], backupHotLineEveningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(backupHotLineEveningEndTime[0], backupHotLineEveningEndTime[1], backupHotLineEveningEndTime[2]))}`\n        },\n        {\n            title: \"Cashier\",\n            startDate: `${saturday = new Date(saturday.setHours(cashierEveningStartTime[0], cashierEveningStartTime[1], cashierEveningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(cashierEveningEndTime[0], cashierEveningEndTime[1], cashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Backup Cash\",\n            startDate: `${saturday = new Date(saturday.setHours(backupCashierEveningStartTime[0], backupCashierEveningStartTime[1], backupCashierEveningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(backupCashierEveningEndTime[0], backupCashierEveningEndTime[1], backupCashierEveningEndTime[2]))}`\n        },\n        {\n            title: \"Maintenance\",\n            startDate: `${saturday = new Date(saturday.setHours(maintenanceEveningStartTime[0], maintenanceEveningStartTime[1], maintenanceEveningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(maintenanceEveningEndTime[0], maintenanceEveningEndTime[1], maintenanceEveningEndTime[2]))}`\n        },\n        {\n            title: \"Meat Prep\",\n            startDate: `${saturday = new Date(saturday.setHours(meatPrepEveningStartTime[0], meatPrepEveningStartTime[1], meatPrepEveningStartTime[2]))}`,\n            endDate: `${saturday = new Date(saturday.setHours(meatPrepEveningEndTime[0], meatPrepEveningEndTime[1], meatPrepEveningEndTime[2]))}`\n        },\n    ],\n\n]\n\nexport default shifts;","/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/testData/testTimes.js",[],"/Users/tyler/Documents/Programming/ReactApps/auto-scheduler-app/client/src/testData/testEmployees.js",[],{"ruleId":"382","replacedBy":"383"},{"ruleId":"384","replacedBy":"385"},{"ruleId":"386","severity":1,"message":"387","line":8,"column":8,"nodeType":"388","messageId":"389","endLine":8,"endColumn":13},{"ruleId":"386","severity":1,"message":"390","line":14,"column":10,"nodeType":"388","messageId":"389","endLine":14,"endColumn":22},{"ruleId":"386","severity":1,"message":"391","line":15,"column":10,"nodeType":"388","messageId":"389","endLine":15,"endColumn":19},{"ruleId":"386","severity":1,"message":"392","line":19,"column":30,"nodeType":"388","messageId":"389","endLine":19,"endColumn":51},{"ruleId":"386","severity":1,"message":"393","line":7,"column":8,"nodeType":"388","messageId":"389","endLine":7,"endColumn":14},{"ruleId":"386","severity":1,"message":"394","line":2,"column":8,"nodeType":"388","messageId":"389","endLine":2,"endColumn":21},{"ruleId":"386","severity":1,"message":"395","line":3,"column":8,"nodeType":"388","messageId":"389","endLine":3,"endColumn":20},{"ruleId":"386","severity":1,"message":"396","line":4,"column":10,"nodeType":"388","messageId":"389","endLine":4,"endColumn":13},{"ruleId":"386","severity":1,"message":"397","line":4,"column":32,"nodeType":"388","messageId":"389","endLine":4,"endColumn":36},{"ruleId":"386","severity":1,"message":"398","line":44,"column":12,"nodeType":"388","messageId":"389","endLine":44,"endColumn":21},{"ruleId":"386","severity":1,"message":"399","line":44,"column":23,"nodeType":"388","messageId":"389","endLine":44,"endColumn":35},{"ruleId":"386","severity":1,"message":"397","line":5,"column":8,"nodeType":"388","messageId":"389","endLine":5,"endColumn":12},{"ruleId":"386","severity":1,"message":"400","line":1,"column":10,"nodeType":"388","messageId":"389","endLine":1,"endColumn":18},{"ruleId":"386","severity":1,"message":"401","line":2,"column":8,"nodeType":"388","messageId":"389","endLine":2,"endColumn":12},{"ruleId":"386","severity":1,"message":"402","line":10,"column":8,"nodeType":"388","messageId":"389","endLine":10,"endColumn":13},{"ruleId":"386","severity":1,"message":"403","line":14,"column":20,"nodeType":"388","messageId":"389","endLine":14,"endColumn":30},{"ruleId":"386","severity":1,"message":"404","line":15,"column":10,"nodeType":"388","messageId":"389","endLine":15,"endColumn":18},{"ruleId":"386","severity":1,"message":"405","line":6,"column":8,"nodeType":"388","messageId":"389","endLine":6,"endColumn":21},{"ruleId":"386","severity":1,"message":"406","line":9,"column":8,"nodeType":"388","messageId":"389","endLine":9,"endColumn":18},{"ruleId":"386","severity":1,"message":"407","line":1,"column":10,"nodeType":"388","messageId":"389","endLine":1,"endColumn":20},{"ruleId":"386","severity":1,"message":"408","line":4,"column":5,"nodeType":"388","messageId":"389","endLine":4,"endColumn":17},{"ruleId":"386","severity":1,"message":"409","line":5,"column":5,"nodeType":"388","messageId":"389","endLine":5,"endColumn":22},{"ruleId":"386","severity":1,"message":"410","line":12,"column":5,"nodeType":"388","messageId":"389","endLine":12,"endColumn":20},{"ruleId":"386","severity":1,"message":"411","line":13,"column":5,"nodeType":"388","messageId":"389","endLine":13,"endColumn":23},{"ruleId":"386","severity":1,"message":"401","line":20,"column":8,"nodeType":"388","messageId":"389","endLine":20,"endColumn":12},{"ruleId":"386","severity":1,"message":"407","line":1,"column":10,"nodeType":"388","messageId":"389","endLine":1,"endColumn":20},{"ruleId":"386","severity":1,"message":"412","line":7,"column":5,"nodeType":"388","messageId":"389","endLine":7,"endColumn":12},{"ruleId":"386","severity":1,"message":"413","line":10,"column":5,"nodeType":"388","messageId":"389","endLine":10,"endColumn":23},{"ruleId":"386","severity":1,"message":"414","line":11,"column":5,"nodeType":"388","messageId":"389","endLine":11,"endColumn":12},{"ruleId":"386","severity":1,"message":"415","line":12,"column":5,"nodeType":"388","messageId":"389","endLine":12,"endColumn":17},{"ruleId":"386","severity":1,"message":"416","line":13,"column":5,"nodeType":"388","messageId":"389","endLine":13,"endColumn":16},{"ruleId":"386","severity":1,"message":"417","line":14,"column":5,"nodeType":"388","messageId":"389","endLine":14,"endColumn":18},{"ruleId":"386","severity":1,"message":"401","line":16,"column":8,"nodeType":"388","messageId":"389","endLine":16,"endColumn":12},{"ruleId":"386","severity":1,"message":"390","line":17,"column":10,"nodeType":"388","messageId":"389","endLine":17,"endColumn":22},{"ruleId":"386","severity":1,"message":"400","line":2,"column":10,"nodeType":"388","messageId":"389","endLine":2,"endColumn":18},{"ruleId":"386","severity":1,"message":"418","line":3,"column":8,"nodeType":"388","messageId":"389","endLine":3,"endColumn":13},{"ruleId":"386","severity":1,"message":"391","line":4,"column":8,"nodeType":"388","messageId":"389","endLine":4,"endColumn":17},{"ruleId":"386","severity":1,"message":"407","line":5,"column":10,"nodeType":"388","messageId":"389","endLine":5,"endColumn":20},{"ruleId":"386","severity":1,"message":"419","line":17,"column":5,"nodeType":"388","messageId":"389","endLine":17,"endColumn":21},{"ruleId":"386","severity":1,"message":"420","line":19,"column":5,"nodeType":"388","messageId":"389","endLine":19,"endColumn":23},{"ruleId":"386","severity":1,"message":"421","line":20,"column":5,"nodeType":"388","messageId":"389","endLine":20,"endColumn":16},{"ruleId":"386","severity":1,"message":"417","line":21,"column":5,"nodeType":"388","messageId":"389","endLine":21,"endColumn":18},{"ruleId":"386","severity":1,"message":"414","line":22,"column":5,"nodeType":"388","messageId":"389","endLine":22,"endColumn":12},{"ruleId":"386","severity":1,"message":"415","line":23,"column":5,"nodeType":"388","messageId":"389","endLine":23,"endColumn":17},{"ruleId":"386","severity":1,"message":"422","line":25,"column":10,"nodeType":"388","messageId":"389","endLine":25,"endColumn":33},{"ruleId":"382","replacedBy":"423"},{"ruleId":"384","replacedBy":"424"},{"ruleId":"386","severity":1,"message":"425","line":4,"column":8,"nodeType":"388","messageId":"389","endLine":4,"endColumn":18},{"ruleId":"386","severity":1,"message":"387","line":8,"column":8,"nodeType":"388","messageId":"389","endLine":8,"endColumn":13},{"ruleId":"386","severity":1,"message":"426","line":11,"column":35,"nodeType":"388","messageId":"389","endLine":11,"endColumn":40},{"ruleId":"386","severity":1,"message":"427","line":11,"column":42,"nodeType":"388","messageId":"389","endLine":11,"endColumn":50},{"ruleId":"386","severity":1,"message":"428","line":18,"column":21,"nodeType":"388","messageId":"389","endLine":18,"endColumn":33},{"ruleId":"386","severity":1,"message":"400","line":1,"column":10,"nodeType":"388","messageId":"389","endLine":1,"endColumn":18},{"ruleId":"386","severity":1,"message":"429","line":2,"column":10,"nodeType":"388","messageId":"389","endLine":2,"endColumn":21},{"ruleId":"386","severity":1,"message":"430","line":2,"column":23,"nodeType":"388","messageId":"389","endLine":2,"endColumn":34},{"ruleId":"386","severity":1,"message":"394","line":3,"column":8,"nodeType":"388","messageId":"389","endLine":3,"endColumn":21},{"ruleId":"386","severity":1,"message":"396","line":4,"column":10,"nodeType":"388","messageId":"389","endLine":4,"endColumn":13},{"ruleId":"386","severity":1,"message":"401","line":4,"column":15,"nodeType":"388","messageId":"389","endLine":4,"endColumn":19},{"ruleId":"386","severity":1,"message":"391","line":4,"column":21,"nodeType":"388","messageId":"389","endLine":4,"endColumn":30},{"ruleId":"386","severity":1,"message":"407","line":4,"column":38,"nodeType":"388","messageId":"389","endLine":4,"endColumn":48},{"ruleId":"386","severity":1,"message":"431","line":4,"column":50,"nodeType":"388","messageId":"389","endLine":4,"endColumn":54},{"ruleId":"386","severity":1,"message":"418","line":4,"column":56,"nodeType":"388","messageId":"389","endLine":4,"endColumn":61},{"ruleId":"386","severity":1,"message":"432","line":6,"column":8,"nodeType":"388","messageId":"389","endLine":6,"endColumn":21},{"ruleId":"433","severity":1,"message":"434","line":26,"column":25,"nodeType":"435","endLine":26,"endColumn":75},{"ruleId":"386","severity":1,"message":"407","line":3,"column":10,"nodeType":"388","messageId":"389","endLine":3,"endColumn":20},{"ruleId":"386","severity":1,"message":"397","line":5,"column":8,"nodeType":"388","messageId":"389","endLine":5,"endColumn":12},{"ruleId":"386","severity":1,"message":"436","line":13,"column":8,"nodeType":"388","messageId":"389","endLine":13,"endColumn":23},{"ruleId":"386","severity":1,"message":"395","line":14,"column":8,"nodeType":"388","messageId":"389","endLine":14,"endColumn":20},{"ruleId":"386","severity":1,"message":"437","line":1,"column":20,"nodeType":"388","messageId":"389","endLine":1,"endColumn":29},{"ruleId":"386","severity":1,"message":"438","line":3,"column":10,"nodeType":"388","messageId":"389","endLine":3,"endColumn":22},{"ruleId":"386","severity":1,"message":"391","line":7,"column":10,"nodeType":"388","messageId":"389","endLine":7,"endColumn":19},{"ruleId":"386","severity":1,"message":"439","line":14,"column":11,"nodeType":"388","messageId":"389","endLine":14,"endColumn":19},{"ruleId":"386","severity":1,"message":"440","line":3,"column":24,"nodeType":"388","messageId":"389","endLine":3,"endColumn":38},{"ruleId":"386","severity":1,"message":"431","line":4,"column":10,"nodeType":"388","messageId":"389","endLine":4,"endColumn":14},{"ruleId":"386","severity":1,"message":"391","line":4,"column":16,"nodeType":"388","messageId":"389","endLine":4,"endColumn":25},{"ruleId":"386","severity":1,"message":"406","line":4,"column":33,"nodeType":"388","messageId":"389","endLine":4,"endColumn":43},{"ruleId":"441","severity":1,"message":"442","line":3,"column":1,"nodeType":"443","endLine":16,"endColumn":2},{"ruleId":"386","severity":1,"message":"440","line":3,"column":10,"nodeType":"388","messageId":"389","endLine":3,"endColumn":24},{"ruleId":"386","severity":1,"message":"444","line":4,"column":62,"nodeType":"388","messageId":"389","endLine":4,"endColumn":72},{"ruleId":"386","severity":1,"message":"445","line":5,"column":8,"nodeType":"388","messageId":"389","endLine":5,"endColumn":25},{"ruleId":"386","severity":1,"message":"446","line":6,"column":8,"nodeType":"388","messageId":"389","endLine":6,"endColumn":21},{"ruleId":"386","severity":1,"message":"447","line":7,"column":8,"nodeType":"388","messageId":"389","endLine":7,"endColumn":26},{"ruleId":"386","severity":1,"message":"448","line":4,"column":47,"nodeType":"388","messageId":"389","endLine":4,"endColumn":54},{"ruleId":"386","severity":1,"message":"449","line":4,"column":102,"nodeType":"388","messageId":"389","endLine":4,"endColumn":115},{"ruleId":"386","severity":1,"message":"450","line":4,"column":117,"nodeType":"388","messageId":"389","endLine":4,"endColumn":134},{"ruleId":"386","severity":1,"message":"418","line":4,"column":151,"nodeType":"388","messageId":"389","endLine":4,"endColumn":156},{"ruleId":"451","severity":1,"message":"452","line":83,"column":9,"nodeType":"453","messageId":"454","endLine":104,"endColumn":10},{"ruleId":"455","severity":1,"message":"456","line":108,"column":32,"nodeType":"457","messageId":"458","endLine":108,"endColumn":34},{"ruleId":"455","severity":1,"message":"456","line":119,"column":31,"nodeType":"457","messageId":"458","endLine":119,"endColumn":33},{"ruleId":"455","severity":1,"message":"456","line":185,"column":30,"nodeType":"457","messageId":"458","endLine":185,"endColumn":32},{"ruleId":"455","severity":1,"message":"456","line":185,"column":54,"nodeType":"457","messageId":"458","endLine":185,"endColumn":56},{"ruleId":"455","severity":1,"message":"456","line":185,"column":81,"nodeType":"457","messageId":"458","endLine":185,"endColumn":83},{"ruleId":"455","severity":1,"message":"456","line":185,"column":102,"nodeType":"457","messageId":"458","endLine":185,"endColumn":104},{"ruleId":"386","severity":1,"message":"406","line":1,"column":18,"nodeType":"388","messageId":"389","endLine":1,"endColumn":28},{"ruleId":"386","severity":1,"message":"437","line":2,"column":20,"nodeType":"388","messageId":"389","endLine":2,"endColumn":29},{"ruleId":"386","severity":1,"message":"438","line":4,"column":24,"nodeType":"388","messageId":"389","endLine":4,"endColumn":36},{"ruleId":"386","severity":1,"message":"459","line":15,"column":12,"nodeType":"388","messageId":"389","endLine":15,"endColumn":20},{"ruleId":"386","severity":1,"message":"460","line":15,"column":22,"nodeType":"388","messageId":"389","endLine":15,"endColumn":33},{"ruleId":"386","severity":1,"message":"461","line":16,"column":12,"nodeType":"388","messageId":"389","endLine":16,"endColumn":20},{"ruleId":"386","severity":1,"message":"462","line":16,"column":22,"nodeType":"388","messageId":"389","endLine":16,"endColumn":33},{"ruleId":"386","severity":1,"message":"463","line":17,"column":12,"nodeType":"388","messageId":"389","endLine":17,"endColumn":25},{"ruleId":"386","severity":1,"message":"464","line":17,"column":27,"nodeType":"388","messageId":"389","endLine":17,"endColumn":43},{"ruleId":"386","severity":1,"message":"465","line":18,"column":12,"nodeType":"388","messageId":"389","endLine":18,"endColumn":21},{"ruleId":"386","severity":1,"message":"428","line":18,"column":23,"nodeType":"388","messageId":"389","endLine":18,"endColumn":35},{"ruleId":"455","severity":1,"message":"456","line":116,"column":29,"nodeType":"457","messageId":"458","endLine":116,"endColumn":31},{"ruleId":"386","severity":1,"message":"407","line":1,"column":10,"nodeType":"388","messageId":"389","endLine":1,"endColumn":20},{"ruleId":"386","severity":1,"message":"408","line":4,"column":5,"nodeType":"388","messageId":"389","endLine":4,"endColumn":17},{"ruleId":"386","severity":1,"message":"409","line":5,"column":5,"nodeType":"388","messageId":"389","endLine":5,"endColumn":22},{"ruleId":"386","severity":1,"message":"466","line":10,"column":5,"nodeType":"388","messageId":"389","endLine":10,"endColumn":13},{"ruleId":"386","severity":1,"message":"410","line":12,"column":5,"nodeType":"388","messageId":"389","endLine":12,"endColumn":20},{"ruleId":"386","severity":1,"message":"411","line":13,"column":5,"nodeType":"388","messageId":"389","endLine":13,"endColumn":23},{"ruleId":"386","severity":1,"message":"415","line":16,"column":5,"nodeType":"388","messageId":"389","endLine":16,"endColumn":17},{"ruleId":"386","severity":1,"message":"401","line":20,"column":8,"nodeType":"388","messageId":"389","endLine":20,"endColumn":12},{"ruleId":"386","severity":1,"message":"390","line":21,"column":10,"nodeType":"388","messageId":"389","endLine":21,"endColumn":22},{"ruleId":"386","severity":1,"message":"467","line":22,"column":8,"nodeType":"388","messageId":"389","endLine":22,"endColumn":14},{"ruleId":"386","severity":1,"message":"430","line":23,"column":10,"nodeType":"388","messageId":"389","endLine":23,"endColumn":21},{"ruleId":"386","severity":1,"message":"407","line":1,"column":10,"nodeType":"388","messageId":"389","endLine":1,"endColumn":20},{"ruleId":"386","severity":1,"message":"408","line":4,"column":5,"nodeType":"388","messageId":"389","endLine":4,"endColumn":17},{"ruleId":"386","severity":1,"message":"409","line":5,"column":5,"nodeType":"388","messageId":"389","endLine":5,"endColumn":22},{"ruleId":"386","severity":1,"message":"412","line":9,"column":5,"nodeType":"388","messageId":"389","endLine":9,"endColumn":12},{"ruleId":"386","severity":1,"message":"415","line":14,"column":5,"nodeType":"388","messageId":"389","endLine":14,"endColumn":17},{"ruleId":"386","severity":1,"message":"401","line":18,"column":8,"nodeType":"388","messageId":"389","endLine":18,"endColumn":12},{"ruleId":"386","severity":1,"message":"444","line":3,"column":26,"nodeType":"388","messageId":"389","endLine":3,"endColumn":36},{"ruleId":"386","severity":1,"message":"468","line":3,"column":38,"nodeType":"388","messageId":"389","endLine":3,"endColumn":42},{"ruleId":"386","severity":1,"message":"469","line":4,"column":8,"nodeType":"388","messageId":"389","endLine":4,"endColumn":20},{"ruleId":"470","severity":1,"message":"471","line":27,"column":60,"nodeType":"472","messageId":"473","endLine":27,"endColumn":62},{"ruleId":"474","severity":1,"message":"475","line":47,"column":5,"nodeType":"476","messageId":"458","endLine":47,"endColumn":10},{"ruleId":"386","severity":1,"message":"401","line":1,"column":10,"nodeType":"388","messageId":"389","endLine":1,"endColumn":14},{"ruleId":"386","severity":1,"message":"477","line":7,"column":11,"nodeType":"388","messageId":"389","endLine":7,"endColumn":15},{"ruleId":"451","severity":1,"message":"452","line":56,"column":1,"nodeType":"453","messageId":"454","endLine":120,"endColumn":2},"no-native-reassign",["478"],"no-negated-in-lhs",["479"],"no-unused-vars","'theme' is defined but never used.","Identifier","unusedVar","'appointments' is defined but never used.","'Container' is defined but never used.","'setEmployeesSchedules' is assigned a value but never used.","'Button' is defined but never used.","'ReactCardFlip' is defined but never used.","'StyledButton' is defined but never used.","'Box' is defined but never used.","'Grid' is defined but never used.","'isFlipped' is assigned a value but never used.","'setIsFlipped' is assigned a value but never used.","'useState' is defined but never used.","'Card' is defined but never used.","'Slide' is defined but never used.","'forwardRef' is defined but never used.","'useTheme' is defined but never used.","'EmployeesView' is defined but never used.","'Typography' is defined but never used.","'makeStyles' is defined but never used.","'EditingState' is defined but never used.","'IntegratedEditing' is defined but never used.","'AppointmentForm' is defined but never used.","'ConfirmationDialog' is defined but never used.","'DayView' is defined but never used.","'AppointmentTooltip' is defined but never used.","'Toolbar' is defined but never used.","'ViewSwitcher' is defined but never used.","'TodayButton' is defined but never used.","'DateNavigator' is defined but never used.","'Paper' is defined but never used.","'DragDropProvider' is defined but never used.","'EditRecurrenceMenu' is defined but never used.","'AllDayPanel' is defined but never used.","'areIntervalsOverlapping' is defined but never used.",["478"],["479"],"'SignInPage' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'setCurrentId' is assigned a value but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'Grow' is defined but never used.","'calendarImage' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'StyledTextField' is defined but never used.","'useEffect' is defined but never used.","'getEmployees' is defined but never used.","'dispatch' is assigned a value but never used.","'deleteEmployee' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'IconButton' is defined but never used.","'AccountCircleIcon' is defined but never used.","'ArrowBackIcon' is defined but never used.","'contactButtonImage' is defined but never used.","'Divider' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'employee' is assigned a value but never used.","'setEmployee' is assigned a value but never used.","'schedule' is assigned a value but never used.","'setSchedule' is assigned a value but never used.","'scheduleStack' is assigned a value but never used.","'setScheduleStack' is assigned a value but never used.","'currentId' is assigned a value but never used.","'WeekView' is defined but never used.","'shifts' is defined but never used.","'Fade' is defined but never used.","'MoreVertIcon' is defined but never used.","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-dupe-keys","Duplicate key 'width'.","ObjectExpression","'days' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]